#           }
#           if (fit$model=="exp-5"){
#                f <- cont_exp_5_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="power"){
#                f <- cont_power_f(fit$parameters,test_doses)
#           }
#           col = alphablend(col='coral2',A$posterior_probs[ii])
#           lines(test_doses,f,col=col,lwd = 2)
#      }
#
#
# }
#
#
# if (ncol(fit$data) ==4){
#      points(doses,mean)
#      arrows(x0=doses, y0=lerror, x1=doses,
#             y1=uerror, code=3, angle=90, length=0.1)
# }else{
#      points(doses,Response,pch=16)
# }
}
.plot.BMDcontinuous_MA(a)
.plot.BMDcontinuous_MA(A)
density_col="blueviolet"
credint_col="azure2"
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
#plot the model average curve
if ("BMDcontinuous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples);
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
#plot(dose,Response,type='n')#,...)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
}
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
me <- colMeans(temp_f)
lq <- apply(temp_f,2,quantile, probs = qprob)
uq <- apply(temp_f,2,quantile, probs = 1-qprob)
col1 = alphablend(credint_col,1)
# Data structure for polygon - this part should be re-implmeneted as ggplot object
out<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(dose),max(dose)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/500)
out2<-out+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
out3<-out2+geom_smooth(aes(x=test_doses,y=me),col="blue")+
geom_polygon(aes(x=c(test_doses[length(test_doses):1],test_doses),y=c(uq[length(test_doses):1],lq)),fill="blue",alpha=0.1)
#polygon(c(test_doses,test_doses[length(test_doses):1]),
#        c(uq,lq[length(test_doses):1]),col = col1,border=col1)
# lines(test_doses,me,lwd=2)
# temp_fit <- splinefun(test_doses,me)
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
temp = fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp = temp[!is.infinite(temp)]
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
# BMD MA density needs to be double checked
out4<-out3+geom_polygon(aes(x=c(0,D1_x,max(doses)),y=c(0,0+D1_y,0)), fill = "lightblue1", alpha=0.6)
}
# Weighted BMD sampling meaning should be added
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
temp = temp[temp < 20 * max_dose]
Dens =  density(temp,cut=c(quantile(temp,0.995,na.rm = TRUE)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
#polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
out4<-out3+geom_polygon(aes(x=c(0,D1_x,max(doses)),y=c(0,D1_y,0)), fill = "lightblue", alpha=0.7)
#Plot only level >2
df<-NULL
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-3"){
f <- cont_exp_3_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
}
}
out5<-out4+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
out5
# }else{
#     ## Non MCMC case
#      data_d   <-  A[[fit_idx[1]]]$data
#      max_dose <- max(data_d[,1])
#      min_dose <- min(data_d[,1])
#      test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
#      temp_f   <- matrix(0,length(fit_idx),length(test_doses))
#
#      if (ncol(data_d) == 4 ){ #sufficient statistics
#           mean <- data_d[,2,drop=F]
#           se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
#           doses = data_d[,1,drop=F]
#           uerror <- mean+se
#           lerror <- mean-se
#
#           dose = c(doses,doses)
#           Response = c(uerror,lerror)
#          # plot(dose,Response,type='n',...)
#
#      }else{
#           Response <- data_d[,2,drop=F]
#           doses = data_d[,1,drop=F]
#          #plot(doses,Response,type='n',...)
#      }
#
#      for (ii in 1:length(fit_idx)){
#           fit <- A[[fit_idx[ii]]]
#           if (fit$model=="FUNL"){
#                temp_f[ii,] <- cont_FUNL_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="hill"){
#                temp_f[ii,] <- cont_hill_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="exp-3"){
#                temp_f[ii,] <- cont_exp_3_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="exp-5"){
#                temp_f[ii,] <- cont_exp_5_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="power"){
#                temp_f[ii,] <- cont_power_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#      }
#
#      me <- colSums(temp_f)
#
#      lines(test_doses,me,lwd=2)
#
#      temp_fit <- splinefun(test_doses,me)
#      bmds <- splinefun(A$ma_bmd[,2],A$ma_bmd[,1])
#      temp_bmd <- bmds(runif(3000,0,max(A$ma_bmd[,2])))
#
#      bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
#      if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
#           lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
#           lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
#           lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
#      }
#
#
#      temp = temp_bmd[!is.nan(temp_bmd)]
#      temp = temp[!is.infinite(temp)]
#      Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
#      Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
#      temp = which(Dens$x < max(test_doses))
#      D1_y = Dens$y[temp]
#      D1_x = Dens$x[temp]
#      qm = min(Response)
#      polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#      #plot the individual models proportional to their weight
#      for (ii in 1:length(fit_idx)){
#           fit <- A[[fit_idx[ii]]]
#           if (fit$model=="FUNL"){
#                f <- cont_FUNL_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="hill"){
#                f <- cont_hill_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="exp-3"){
#                f <- cont_exp_3_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="exp-5"){
#                f <- cont_exp_5_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="power"){
#                f <- cont_power_f(fit$parameters,test_doses)
#           }
#           col = alphablend(col='coral2',A$posterior_probs[ii])
#           lines(test_doses,f,col=col,lwd = 2)
#      }
#
#
# }
#
#
# if (ncol(fit$data) ==4){
#      points(doses,mean)
#      arrows(x0=doses, y0=lerror, x1=doses,
#             y1=uerror, code=3, angle=90, length=0.1)
# }else{
#      points(doses,Response,pch=16)
# }
}
class(A)
qprob=0.05
View(A)
View(A)
density_col="blueviolet"
credint_col="azure2"
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
#plot the model average curve
if ("BMDcontinuous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples);
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
#plot(dose,Response,type='n')#,...)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
}
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
me <- colMeans(temp_f)
lq <- apply(temp_f,2,quantile, probs = qprob)
uq <- apply(temp_f,2,quantile, probs = 1-qprob)
col1 = alphablend(credint_col,1)
# Data structure for polygon - this part should be re-implmeneted as ggplot object
out<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(dose),max(dose)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/500)
out2<-out+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
out3<-out2+geom_smooth(aes(x=test_doses,y=me),col="blue")+
geom_polygon(aes(x=c(test_doses[length(test_doses):1],test_doses),y=c(uq[length(test_doses):1],lq)),fill="blue",alpha=0.1)
#polygon(c(test_doses,test_doses[length(test_doses):1]),
#        c(uq,lq[length(test_doses):1]),col = col1,border=col1)
# lines(test_doses,me,lwd=2)
# temp_fit <- splinefun(test_doses,me)
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
temp = fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp = temp[!is.infinite(temp)]
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
# BMD MA density needs to be double checked
out4<-out3+geom_polygon(aes(x=c(0,D1_x,max(doses)),y=c(0,0+D1_y,0)), fill = "lightblue1", alpha=0.6)
}
# Weighted BMD sampling meaning should be added
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
temp = temp[temp < 20 * max_dose]
Dens =  density(temp,cut=c(quantile(temp,0.995,na.rm = TRUE)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
#polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
out4<-out3+geom_polygon(aes(x=c(0,D1_x,max(doses)),y=c(0,D1_y,0)), fill = "lightblue", alpha=0.7)
#Plot only level >2
df<-NULL
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-3"){
f <- cont_exp_3_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
}
}
out5<-out4+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
out5
# }else{
#     ## Non MCMC case
#      data_d   <-  A[[fit_idx[1]]]$data
#      max_dose <- max(data_d[,1])
#      min_dose <- min(data_d[,1])
#      test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
#      temp_f   <- matrix(0,length(fit_idx),length(test_doses))
#
#      if (ncol(data_d) == 4 ){ #sufficient statistics
#           mean <- data_d[,2,drop=F]
#           se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
#           doses = data_d[,1,drop=F]
#           uerror <- mean+se
#           lerror <- mean-se
#
#           dose = c(doses,doses)
#           Response = c(uerror,lerror)
#          # plot(dose,Response,type='n',...)
#
#      }else{
#           Response <- data_d[,2,drop=F]
#           doses = data_d[,1,drop=F]
#          #plot(doses,Response,type='n',...)
#      }
#
#      for (ii in 1:length(fit_idx)){
#           fit <- A[[fit_idx[ii]]]
#           if (fit$model=="FUNL"){
#                temp_f[ii,] <- cont_FUNL_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="hill"){
#                temp_f[ii,] <- cont_hill_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="exp-3"){
#                temp_f[ii,] <- cont_exp_3_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="exp-5"){
#                temp_f[ii,] <- cont_exp_5_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#           if (fit$model=="power"){
#                temp_f[ii,] <- cont_power_f(fit$parameters,test_doses)*A$posterior_probs[ii]
#           }
#      }
#
#      me <- colSums(temp_f)
#
#      lines(test_doses,me,lwd=2)
#
#      temp_fit <- splinefun(test_doses,me)
#      bmds <- splinefun(A$ma_bmd[,2],A$ma_bmd[,1])
#      temp_bmd <- bmds(runif(3000,0,max(A$ma_bmd[,2])))
#
#      bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
#      if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
#           lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
#           lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
#           lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
#      }
#
#
#      temp = temp_bmd[!is.nan(temp_bmd)]
#      temp = temp[!is.infinite(temp)]
#      Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
#      Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
#      temp = which(Dens$x < max(test_doses))
#      D1_y = Dens$y[temp]
#      D1_x = Dens$x[temp]
#      qm = min(Response)
#      polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#      #plot the individual models proportional to their weight
#      for (ii in 1:length(fit_idx)){
#           fit <- A[[fit_idx[ii]]]
#           if (fit$model=="FUNL"){
#                f <- cont_FUNL_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="hill"){
#                f <- cont_hill_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="exp-3"){
#                f <- cont_exp_3_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="exp-5"){
#                f <- cont_exp_5_f(fit$parameters,test_doses)
#           }
#           if (fit$model=="power"){
#                f <- cont_power_f(fit$parameters,test_doses)
#           }
#           col = alphablend(col='coral2',A$posterior_probs[ii])
#           lines(test_doses,f,col=col,lwd = 2)
#      }
#
#
# }
#
#
# if (ncol(fit$data) ==4){
#      points(doses,mean)
#      arrows(x0=doses, y0=lerror, x1=doses,
#             y1=uerror, code=3, angle=90, length=0.1)
# }else{
#      points(doses,Response,pch=16)
# }
}
source('~/RBMDS/ToxicR/R/continuous_plots.R')
abort
restart
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
plot(A)
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
plot(A)
# Fitting example should be much simpler -
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd')
.plot.BMDcontinuous_MA(A)
# Fitting example should be much simpler -
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd')
.plot.BMDcontinuous_MA(A)
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
source('~/RBMDS/ToxicR/R/continuous_plots.R')
