calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("blue", "lightblue", "blue"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)")+theme_minimal()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
color="blue",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("blue", "lightblue", "blue"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)")+theme_bw()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
color="blue",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("blue", "lightblue", "blue"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)")+theme_classic()
out_bmd
out_bmd<-ggplot()+
geom_density(data=t_combine,aes(x=X1), fill = "blue", alpha=0.5)+
labs(x="Dose Level",title="Cleveland Plot")+
theme_classic()+xlim(c(min(doses),20))+
facet_wrap(~X2,nrow=length(fit_idx), scales="free_y")+  geom_vline(xintercept = A$bmd[1],linetype="longdash")
out_bmd
out_bmd<-ggplot()+
geom_density(data=t_combine,aes(x=X1), fill = "blue", alpha=0.5)+
labs(x=" (Dotted Line : MA BMD)",title="Cleveland Plot")+
theme_classic()+xlim(c(min(doses),20))+
facet_wrap(~X2,nrow=length(fit_idx), scales="free_y")+ geom_vline(xintercept = A$bmd[1],linetype="longdash")
out_bmd<-ggplot()+
geom_density(data=t_combine,aes(x=X1), fill = "blue", alpha=0.5)+
labs(x="Dose Level (Dotted Line : MA BMD)",title="Cleveland Plot")+
theme_classic()+xlim(c(min(doses),20))+
facet_wrap(~X2,nrow=length(fit_idx), scales="free_y")+ geom_vline(xintercept = A$bmd[1],linetype="longdash")
out_bmd
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
color="blue",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("blue", "lightblue", "blue"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)")+theme_classic()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("blue", "grey", "blue"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)")+theme_classic()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("lightblue", "blue", "lightblue"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)")+theme_classic()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("red", "blue", "red"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)")+theme_classic()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("red", "blue", "red"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)", title="Density plot for each fitted model")+theme_classic()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("red", "blue", "red"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)", title="Density plots for each fitted model")+theme_classic()
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("red", "blue", "red"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)", title="Density plots for each fitted model")+theme_classic()+
theme(legend.position="none")
# Purpose: Plot stacked BMD density plots
# Author : Sooyeong Lim
# Date : 12/03/2020
# Load libraries
library(ToxicR)
library(ggplot2)
library(tidyverse)
library(ggridges)
# Load required function from source code;
source("data_visualization/dicho_functions.R")
# Sample Dichotomous Data set
mData <- matrix(c(1, 3,50,
3, 10, 50,
16, 18,50,
32, 40,50,
50, 48,50),nrow=5,ncol=3,byrow=T)
# Sample Fitting Case
A<-ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type="mcmc", BMD_TYPE="added",BMR=0.1)
# Construct bmd sample plots for mcmc
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
qprob=0.05
#Dose levels
doses<-mData[,1]
for (i in fit_idx){
# Loop for the model
fit<-A[[i]]
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
probs <- (0.5+fit$data[,2,drop=T])/(1.0 + fit$data[,3,drop=T])
doses = mData[,1,drop=T]
if (fit$model=="hill"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_hill_f, d=test_doses)
}
if (fit$model=="gamma"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_gamma_f, d=test_doses)
}
if (fit$model=="logistic"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_logist_f, d=test_doses)
}
if (fit$model=="log-logistic"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_llogist_f, d=test_doses)
}
if (fit$model=="probit"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_probit_f, d=test_doses)
}
if (fit$model=="log-probit"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_lprobit_f, d=test_doses)
}
if (fit$model=="multistage"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_multistage_f, d=test_doses)
}
if (fit$model=="qlinear"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_qlinear_f, d=test_doses)
}
temp <- fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp <- temp[!is.infinite(temp)]
# Q <- t(Q)
#
# me <- colMeans(Q)
# lq <- apply(Q,2,quantile, probs = qprob)
# uq <- apply(Q,2,quantile, probs = 1-qprob)
Dens =  density(temp,cut=c(max(doses)))
# what is this 0.4 means? Scale?
# normalize it?-- We don't need it actually here
# Dens$y = Dens$y/max(Dens$y) * max(probs)
# temp = which(Dens$x < max(doses))
# D1_y = Dens$y[temp]
# D1_x = Dens$x[temp]
# Do I need to stack up the dataset?
temp_density<-data.frame(matrix(0,length(temp),2))
temp_density[,2]=fit$model
temp_density[,1]=temp
assign(paste("t",i,sep="_"),temp_density)
}
# combine the fitting dataset here
t_combine<-rbind(t_1,t_2,t_3,t_4,t_5,t_6,t_7,t_8,t_9)
View(t_combine)
out_bmd<-ggplot()+
geom_density(data=t_combine,aes(x=X1), fill = "blue", alpha=0.5)+
labs(x="Dose Level (Dotted Line : MA BMD)",title="Cleveland Plot")+
theme_classic()+xlim(c(min(doses),20))+
facet_wrap(~X2,nrow=length(fit_idx), scales="free_y")+ geom_vline(xintercept = A$bmd[1],linetype="longdash")
out_bmd
samp<-t_combine %>% filter(X2=="hill")
q5<-quantile(samp$X1,0.05)
q95<-quantile(samp$X1,.95)
x.dens <- density(samp$X1)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
# Object overwrapp
# I need to stack 8 different model. Is there any better way? free y_scale John's suggestion
ggplot()+
geom_density(data=samp,aes(x=X1),fill="blue",alpha=0.7)+
xlim(c(0,20))+labs(x="Dose Level", title="BMD Estimates by Modles")+
geom_area(data=subset(df.dens, x>=q5 &  x<=q95), aes(x=x,y=y),fill="blue",alpha=0.5)
# How can I add this for every case?
#Need join posterior later
#Needs to be ordered based on factor
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("red", "blue", "red"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)", title="Density plots for each fitted model")+theme_classic()+
theme(legend.position="none")
# Purpose: Plot stacked BMD density plots
# Author : Sooyeong Lim
# Date : 12/03/2020
# Load libraries
library(ToxicR)
library(ggplot2)
library(tidyverse)
library(ggridges)
# Load required function from source code;
source("data_visualization/Cleveland_Plots/dicho_functions.R")
# Sample Dichotomous Data set
mData <- matrix(c(1, 3,50,
3, 10, 50,
16, 18,50,
32, 40,50,
50, 48,50),nrow=5,ncol=3,byrow=T)
# Sample Fitting Case
A<-ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type="mcmc", BMD_TYPE="added",BMR=0.1)
# Construct bmd sample plots for mcmc
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
qprob=0.05
#Dose levels
doses<-mData[,1]
for (i in fit_idx){
# Loop for the model
fit<-A[[i]]
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
probs <- (0.5+fit$data[,2,drop=T])/(1.0 + fit$data[,3,drop=T])
doses = mData[,1,drop=T]
if (fit$model=="hill"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_hill_f, d=test_doses)
}
if (fit$model=="gamma"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_gamma_f, d=test_doses)
}
if (fit$model=="logistic"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_logist_f, d=test_doses)
}
if (fit$model=="log-logistic"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_llogist_f, d=test_doses)
}
if (fit$model=="probit"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_probit_f, d=test_doses)
}
if (fit$model=="log-probit"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_lprobit_f, d=test_doses)
}
if (fit$model=="multistage"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_multistage_f, d=test_doses)
}
if (fit$model=="qlinear"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_qlinear_f, d=test_doses)
}
temp <- fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp <- temp[!is.infinite(temp)]
# Q <- t(Q)
#
# me <- colMeans(Q)
# lq <- apply(Q,2,quantile, probs = qprob)
# uq <- apply(Q,2,quantile, probs = 1-qprob)
Dens =  density(temp,cut=c(max(doses)))
# what is this 0.4 means? Scale?
# normalize it?-- We don't need it actually here
# Dens$y = Dens$y/max(Dens$y) * max(probs)
# temp = which(Dens$x < max(doses))
# D1_y = Dens$y[temp]
# D1_x = Dens$x[temp]
# Do I need to stack up the dataset?
temp_density<-data.frame(matrix(0,length(temp),2))
temp_density[,2]=fit$model
temp_density[,1]=temp
assign(paste("t",i,sep="_"),temp_density)
}
# combine the fitting dataset here
t_combine<-rbind(t_1,t_2,t_3,t_4,t_5,t_6,t_7,t_8,t_9)
View(t_combine)
out_bmd<-ggplot()+
geom_density(data=t_combine,aes(x=X1), fill = "blue", alpha=0.5)+
labs(x="Dose Level (Dotted Line : MA BMD)",title="Cleveland Plot")+
theme_classic()+xlim(c(min(doses),20))+
facet_wrap(~X2,nrow=length(fit_idx), scales="free_y")+ geom_vline(xintercept = A$bmd[1],linetype="longdash")
out_bmd
samp<-t_combine %>% filter(X2=="hill")
q5<-quantile(samp$X1,0.05)
q95<-quantile(samp$X1,.95)
x.dens <- density(samp$X1)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
# Object overwrapp
# I need to stack 8 different model. Is there any better way? free y_scale John's suggestion
ggplot()+
geom_density(data=samp,aes(x=X1),fill="blue",alpha=0.7)+
xlim(c(0,20))+labs(x="Dose Level", title="BMD Estimates by Modles")+
geom_area(data=subset(df.dens, x>=q5 &  x<=q95), aes(x=x,y=y),fill="blue",alpha=0.5)
# How can I add this for every case?
#Need join posterior later
#Needs to be ordered based on factor
ggplot(data=t_combine,aes(x=X1, y=X2, fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("red", "blue", "red"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)", title="Density plots for each fitted model")+theme_classic()+
theme(legend.position="none")
# Object overwrapp
# I need to stack 8 different model. Is there any better way? free y_scale John's suggestion
ggplot()+
geom_density(data=samp,aes(x=X1),fill="blue",alpha=0.7)+
xlim(c(0,20))+labs(x="Dose Level", title="BMD Estimates by Modles")+
geom_area(data=subset(df.dens, x>=q5 &  x<=q95), aes(x=x,y=y),fill="blue",alpha=0.5)
View(t_combine)
A$posterior_probs
temp_density
A$posterior_probs[1]
for (i in fit_idx){
# Loop for the model
fit<-A[[i]]
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
probs <- (0.5+fit$data[,2,drop=T])/(1.0 + fit$data[,3,drop=T])
doses = mData[,1,drop=T]
if (fit$model=="hill"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_hill_f, d=test_doses)
}
if (fit$model=="gamma"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_gamma_f, d=test_doses)
}
if (fit$model=="logistic"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_logist_f, d=test_doses)
}
if (fit$model=="log-logistic"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_llogist_f, d=test_doses)
}
if (fit$model=="probit"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_probit_f, d=test_doses)
}
if (fit$model=="log-probit"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_lprobit_f, d=test_doses)
}
if (fit$model=="multistage"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_multistage_f, d=test_doses)
}
if (fit$model=="qlinear"){
Q <- apply(fit$mcmc_result$PARM_samples,1,.dich_qlinear_f, d=test_doses)
}
temp <- fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp <- temp[!is.infinite(temp)]
# Q <- t(Q)
#
# me <- colMeans(Q)
# lq <- apply(Q,2,quantile, probs = qprob)
# uq <- apply(Q,2,quantile, probs = 1-qprob)
Dens =  density(temp,cut=c(max(doses)))
# what is this 0.4 means? Scale?
# normalize it?-- We don't need it actually here
# Dens$y = Dens$y/max(Dens$y) * max(probs)
# temp = which(Dens$x < max(doses))
# D1_y = Dens$y[temp]
# D1_x = Dens$x[temp]
# Do I need to stack up the dataset?
temp_density<-data.frame(matrix(0,length(temp),3))
temp_density[,2]=fit$model
temp_density[,1]=temp
temp_density[,3]=A$posterior_probs[i]
assign(paste("t",i,sep="_"),temp_density)
}
# combine the fitting dataset here
t_combine<-rbind(t_1,t_2,t_3,t_4,t_5,t_6,t_7,t_8,t_9)
out_bmd<-ggplot()+
geom_density(data=t_combine,aes(x=X1), fill = "blue", alpha=0.5)+
labs(x="Dose Level (Dotted Line : MA BMD)",title="Cleveland Plot")+
theme_classic()+xlim(c(min(doses),20))+
facet_wrap(~X2,nrow=length(fit_idx), scales="free_y")+ geom_vline(xintercept = A$bmd[1],linetype="longdash")
out_bmd
t_combine
ggplot(data=t_combine,aes(x=X1, y=fct_reorder(X2,X3,.desc=T), fill = factor(stat(quantile))))+
stat_density_ridges(geom="density_ridges_gradient",
calc_ecdf=TRUE,quantiles=c(0.025,0.975))+
xlim(c(0,20))+
scale_fill_manual(name = "Probability", values = c("red", "blue", "red"), labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]"))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
labs(y="Model",x="Dose Level (Dotted Line : MA BMD)", title="Density plots for each fitted model")+theme_classic()+
theme(legend.position="none")
ggplot()+
geom_point(data=bmd_ind_df, aes(x=as.numeric(X1), y=fct_reorder(X4,X5,.desc=T),size=(sqrt(as.numeric(X5)))), color="red")+
#scale_colour_gradient(low = "gray", high = "black")+
geom_vline(xintercept=as.numeric(bmd_ind_df$X1[10]), linetype="dotted")+
theme_minimal()+
labs(x="Dose Level",y="Model",title="BMD Estimates by Each Model (Sorted by Posterior Probability)",size="Posterior Probability")+
theme(legend.position="none")+
geom_errorbar(data=bmd_ind_df, width=0.2,aes(xmin=as.numeric(X2), xmax=as.numeric(X3), y=fct_reorder(X4,X5,.desc=T)),color="blue",alpha=0.3)
# Load ToxicR and ggplot package
library(tidyverse)
library(ggplot2)
library(ToxicR)
# Dichotomous case- Sample data input
mData <- matrix(c(1, 3,50,
3, 10, 50,
16, 18,50,
32, 40,50,
50, 48,50),nrow=5,ncol=3,byrow=T)
# Sample RBMDS fitting
A<-ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type="mcmc", BMR=0.1)
# Construct bmd sample plots for mcmc
class_list <- names(A)
# Grap function extract # of indices from the text with same pattern
fit_idx    <- grep("Individual_Model",class_list)
# Create an empty matrix to contain BMD information from each model
bmd_ind<-matrix(0,length(fit_idx)+1,5)
for (i in 1:length(fit_idx)){
# BMD -Median
bmd_ind[i,1]<-A[[i]]$bmd[1]
# BMD -5%
bmd_ind[i,2]<-A[[i]]$bmd[2]
# BMD -95%
bmd_ind[i,3]<-A[[i]]$bmd[3]
# Model name
bmd_ind[i,4]<-A[[i]]$model
bmd_ind[i,5]<-A$posterior_probs[i]
#
#   if (i==(length(fit_idx)+1)){
#
#     # BMD -Median
#     bmd_ind[i,1]<-A$bmd[1]
#     # BMD -5%
#     bmd_ind[i,2]<-A$bmd[2]
#     # BMD -95%
#     bmd_ind[i,3]<-A$bmd[3]
#
#     # Model name
#     bmd_ind[i,4]<-"Model Average"
#
#     bmd_ind[i,5]<-1
#
#   }
}
bmd_ind[length(fit_idx)+1,1]<-A$bmd[1]
bmd_ind[length(fit_idx)+1,2]<-A$bmd[2]
bmd_ind[length(fit_idx)+1,3]<-A$bmd[3]
bmd_ind[length(fit_idx)+1,4]<-"Model Average"
bmd_ind[length(fit_idx)+1,5]<-1
bmd_ind_df<-data.frame(bmd_ind)
# The data structure will show 50% (BMD), 5% (BMDL), 95% upper bound from 9 different model
print(bmd_ind_df)
bmd_ind_df$X1
# I should add a vertical line from the bmd;
ggplot()+
geom_point(data=bmd_ind_df, aes(x=as.numeric(X1), y=fct_reorder(X4,X5,.desc=T),size=(sqrt(as.numeric(X5)))), color="red")+
#scale_colour_gradient(low = "gray", high = "black")+
geom_vline(xintercept=as.numeric(bmd_ind_df$X1[10]), linetype="dotted")+
theme_minimal()+
labs(x="Dose Level",y="Model",title="BMD Estimates by Each Model (Sorted by Posterior Probability)",size="Posterior Probability")+
theme(legend.position="none")+
geom_errorbar(data=bmd_ind_df, width=0.2,aes(xmin=as.numeric(X2), xmax=as.numeric(X3), y=fct_reorder(X4,X5,.desc=T)),color="blue",alpha=0.3)
# Load ToxicR and ggplot package
library(tidyverse)
library(ggplot2)
library(ToxicR)
# Dichotomous case- Sample data input
mData <- matrix(c(1, 3,50,
3, 10, 50,
16, 18,50,
32, 40,50,
50, 48,50),nrow=5,ncol=3,byrow=T)
# Sample RBMDS fitting
A<-ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type="mcmc", BMR=0.1)
# Construct bmd sample plots for mcmc
class_list <- names(A)
# Grap function extract # of indices from the text with same pattern
fit_idx    <- grep("Individual_Model",class_list)
# Create an empty matrix to contain BMD information from each model
bmd_ind<-matrix(0,length(fit_idx)+1,5)
for (i in 1:length(fit_idx)){
# BMD -Median
bmd_ind[i,1]<-A[[i]]$bmd[1]
# BMD -5%
bmd_ind[i,2]<-A[[i]]$bmd[2]
# BMD -95%
bmd_ind[i,3]<-A[[i]]$bmd[3]
# Model name
bmd_ind[i,4]<-A[[i]]$model
bmd_ind[i,5]<-A$posterior_probs[i]
#
#   if (i==(length(fit_idx)+1)){
#
#     # BMD -Median
#     bmd_ind[i,1]<-A$bmd[1]
#     # BMD -5%
#     bmd_ind[i,2]<-A$bmd[2]
#     # BMD -95%
#     bmd_ind[i,3]<-A$bmd[3]
#
#     # Model name
#     bmd_ind[i,4]<-"Model Average"
#
#     bmd_ind[i,5]<-1
#
#   }
}
bmd_ind[length(fit_idx)+1,1]<-A$bmd[1]
bmd_ind[length(fit_idx)+1,2]<-A$bmd[2]
bmd_ind[length(fit_idx)+1,3]<-A$bmd[3]
bmd_ind[length(fit_idx)+1,4]<-"Model Average"
bmd_ind[length(fit_idx)+1,5]<-1
bmd_ind_df<-data.frame(bmd_ind)
# The data structure will show 50% (BMD), 5% (BMDL), 95% upper bound from 9 different model
print(bmd_ind_df)
bmd_ind_df$X1
# I should add a vertical line from the bmd;
ggplot()+
geom_point(data=bmd_ind_df, aes(x=as.numeric(X1), y=fct_reorder(X4,X5,.desc=T),size=(sqrt(as.numeric(X5)))), color="red")+
#scale_colour_gradient(low = "gray", high = "black")+
geom_vline(xintercept=as.numeric(bmd_ind_df$X1[10]), linetype="dotted")+
theme_minimal()+
labs(x="Dose Level",y="Model",title="BMD Estimates by Each Model (Sorted by Posterior Probability)",size="Posterior Probability")+
theme(legend.position="none")+
geom_errorbar(data=bmd_ind_df, width=0.2,aes(xmin=as.numeric(X2), xmax=as.numeric(X3), y=fct_reorder(X4,X5,.desc=T)),color="blue",alpha=0.3)
