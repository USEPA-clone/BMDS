temp = fit$parameters
#temp = c(temp[1:2],0,temp[3],temp[4])
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
}
}
plot_gg<- plot_gg+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
else{ # mcmc run
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/200);
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
me = test_doses*0
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
t <- cont_FUNL_f(fit$parameters,test_doses)
if(BB$posterior_probs[ii] > 0){
me = t*BB$posterior_probs[ii] + me
}
}
if (fit$model=="hill"){
t <- cont_hill_f(fit$parameters,test_doses)
# SL comment - why the name of object is BB? At the beginning it was declared as A-  05/28/21
# I guess this part should be A as well
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="exp-3"){
t <- cont_exp_3_f(fit$parameters,test_doses,decrease)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="exp-5"){
t <- cont_exp_5_f(fit$parameters,test_doses)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="power"){
t <- cont_power_f(fit$parameters,test_doses)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
}
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
# Change the label for Y axis - SL 05/28/21
labs(x="Dose", y="Response",title="Continous MA fitting")+
theme_minimal()
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
##
# Add lines to the BMD
ma_mean <- splinefun(test_doses,me)
ma_BMD = A$bmd
plot_gg = plot_gg +
geom_segment(aes(x=A$bmd, y=ma_mean(A$bmd), xend=A$bmd, yend=min(Response)),color="Red")
# Not sure about this part - SL 05/28/21
#Plot only level >2
df<-NULL
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
temp = fit$parameters
#temp = c(temp[1:2],0,temp[3],temp[4])
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
}
}
plot_gg<- plot_gg+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
}
return(plot_gg)
.plot.BMDcontinuous_MA <- function(A,qprob=0.05,...){
# Should be matched with BMD_MA plots
density_col="blueviolet"
credint_col="azure2"
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
#plot the model average curve
if ("BMDcontinuous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples)
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/200);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses,decrease)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
temp_f[is.infinite(temp_f)] = NA
temp_f[abs(temp_f) > 1e10] = NA
me <- apply(temp_f,2,quantile, probs = 0.5,na.rm = TRUE)
lq <- apply(temp_f,2,quantile, probs = qprob,na.rm = TRUE)
uq <- apply(temp_f,2,quantile, probs = 1-qprob,na.rm = TRUE)
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
plot_gg<-plot_gg+
geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
## Plot the CDF of the Posterior
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
Dens =  density(temp,cut=c(max(test_doses)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
# BMD MA density needs to be double checked
plot_gg<-plot_gg+
geom_polygon(aes(x=c(max(0,min(D1_x)),D1_x,max(0,min(D1_x))),
y=c(min(Response),min(Response)+D1_y*scale,min(Response))),
fill = "blueviolet", alpha=0.6)
}
##
# Add lines to the BMD
ma_mean <- splinefun(test_doses,me)
ma_BMD = A$bmd
plot_gg = plot_gg +
geom_segment(aes(x=A$bmd, y=ma_mean(A$bmd), xend=A$bmd, yend=min(Response)),color="Red")
#Plot only level >2
df<-NULL
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-3"){
temp = fit$fitted_model$parameters
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
plot_gg<- plot_gg+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
}
}
}
## I think this if-else part needs to be clear since it's already in A part ;
else{ # mcmc run
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/200);
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
me = test_doses*0
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
t <- cont_FUNL_f(fit$parameters,test_doses)
if(BB$posterior_probs[ii] > 0){
me = t*BB$posterior_probs[ii] + me
}
}
if (fit$model=="hill"){
t <- cont_hill_f(fit$parameters,test_doses)
# SL comment - why the name of object is BB? At the beginning it was declared as A-  05/28/21
# I guess this part should be A as well
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="exp-3"){
t <- cont_exp_3_f(fit$parameters,test_doses,decrease)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="exp-5"){
t <- cont_exp_5_f(fit$parameters,test_doses)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="power"){
t <- cont_power_f(fit$parameters,test_doses)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
}
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
# Change the label for Y axis - SL 05/28/21
labs(x="Dose", y="Response",title="Continous MA fitting")+
theme_minimal()
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
##
# Add lines to the BMD
ma_mean <- splinefun(test_doses,me)
ma_BMD = A$bmd
plot_gg = plot_gg +
geom_segment(aes(x=A$bmd, y=ma_mean(A$bmd), xend=A$bmd, yend=min(Response)),color="Red")
# Not sure about this part - SL 05/28/21
#Plot only level >2
df<-NULL
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
temp = fit$parameters
#temp = c(temp[1:2],0,temp[3],temp[4])
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
}
}
plot_gg<- plot_gg+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
}
return(plot_gg)
}
BB$ma_bmd
model_list  = data.frame(model_list = c(rep("hill",2),rep("exp-3",2),rep("exp-5",2),rep("power",2)),
distribution_list =  c(c("normal","normal-ncv"),rep(c("normal","normal-ncv"),2),
"normal", "normal-ncv"))
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "mcmc",BMR = 2.05,model_list = model_list )
›BB
BB
BB$posterior_probs
# 05/28 SL Try to focus on the issue here
# 1. CI Band seems odd
# 2. BMD Density plot looks odd
# 3. Color Theme update for giving user more option
plot(BB)
.plot.density.BMDcontinous_MA_MCMC<-function(A){
# Construct bmd sample plots for mcmc
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
qprob=0.05
#Dose levels
data<-A$Individual_Model_1$data
doses<-data[,1]
for (i in fit_idx){
# Loop for the model
fit<-A[[i]]
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
#probs <- (0.5+fit$data[,2,drop=T])/(1.0 + fit$data[,3,drop=T])
if (fit$model=="hill"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_hill_f, d=test_doses)
}
if (fit$model=="exp-3"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_exp_3_f, d=test_doses)
}
if (fit$model=="exp-5"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_exp_5_f, d=test_doses)
}
if (fit$model=="power"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_power_f, d=test_doses)
}
if (fit$model=="FUNL"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_FUNL_f, d=test_doses)
}
temp <- fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp <- temp[!is.infinite(temp)]
# Q <- t(Q)
#
# me <- colMeans(Q)
# lq <- apply(Q,2,quantile, probs = qprob)
# uq <- apply(Q,2,quantile, probs = 1-qprob)
Dens =  density(temp,cut=c(max(doses)))
# what is this 0.4 means? Scale?
# normalize it?-- We don't need it actually here
# Dens$y = Dens$y/max(Dens$y) * max(probs)
# temp = which(Dens$x < max(doses))
# D1_y = Dens$y[temp]
# D1_x = Dens$x[temp]
# Do I need to stack up the dataset?
temp_density<-data.frame(matrix(0,length(temp),3))
temp_density[,2]=fit$model
temp_density[,1]=temp
temp_density[,3]=A$posterior_probs[i]
assign(paste("t",i,sep="_"),temp_density)
}
# So far add the 5 models 01/24/2021
t_combine<-rbind(t_1,t_2,t_3,t_4,t_5)
# This part is needed to get MA density plots
# Model ~xxx..
idx <- sample(1:5, length(A$Individual_Model_1$mcmc_result$BMD_samples),replace=TRUE,prob=A$posterior_probs)
m1<-A$Individual_Model_1
c1<-m1$mcmc_result$BMD_samples
m2<-A$Individual_Model_2
c2<-m2$mcmc_result$BMD_samples
m3<-A$Individual_Model_3
c3<-m3$mcmc_result$BMD_samples
m4<-A$Individual_Model_4
c4<-m4$mcmc_result$BMD_samples
m5<-A$Individual_Model_5
c5<-m5$mcmc_result$BMD_samples
# This part should be dynamically assigned...
combine_samples<-data.frame(cbind(c1,c2,c3,c4,c5))
# Select MA values
BMD_MA<-matrix(NA,length(A$Individual_Model_1$mcmc_result$BMD_samples),1)
for (i in 1:length(A$Individual_Model_1$mcmc_result$BMD_samples)){
BMD_MA[i,1]<-combine_samples[sample(nrow(combine_samples), size=1, replace=TRUE),idx[i]]
}
BMD_MA<-data.frame(BMD_MA)
t_ma<-BMD_MA %>% mutate(X1=BMD_MA,X2="Model Average",X3=1)
#BMD_CDF should be shown here - it
t_ma<-t_ma %>% select(X1,X2,X3)
t_combine2<-rbind(t_combine,t_ma)
t_combine3<-t_combine2 %>% filter(as.numeric(X3)>0.005)
# John's comment- I want to fill the color as
p<-ggplot()+
stat_density_ridges(data=t_combine3, aes(x=X1, y=fct_reorder(X2,X3,.desc=T),group=X2 ,alpha=sqrt(X3), fill=cut(X3,c(0,0.999,1))),
calc_ecdf=TRUE,quantiles=c(0.025,0.975),na.rm=T,quantile_lines=T,scale=0.9)+
xlim(c(0,quantile(t_combine$X1,0.999)))+
geom_vline(xintercept = A$bmd[1],linetype="longdash")+
scale_fill_manual(name="X3", values=c("(0,0.999]"="darkgrey", "(0.999,1]"="red"))+
labs(x="Dose Level (Dotted Line : MA BMD)",y="", title="Density plots for each fitted model (Fit type: MCMC)")+
theme_classic()
p2<-p+theme(legend.position="none", axis.text.y=element_text(size=12))
# stat_density_ridges(data=t_combine3, aes(x=X1, y=fct_reorder(X2,X3,.desc=T), group=X2,fill = factor(stat(quantile))),
#                     geom = "density_ridges_gradient",
#                     calc_ecdf = TRUE, quantiles = c(0.025, 0.975),scale=0.9
# )+ scale_fill_manual(
#   name = "factor(stat(quantile))",
#   values = c("#FF0000A0", "NA", "#FF0000A0"),
#   labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
# )+
p2
# Return output
# p<-ggplot()+
#   stat_density_ridges(data=t_combine3, aes(x=X1, y=fct_reorder(X2,X3,.desc=T),alpha=sqrt(X3)),
#                       calc_ecdf=TRUE,quantiles=c(0.025,0.975),na.rm=T,quantile_lines=T,fill="blue",scale=0.5)+
#   xlim(c(0,quantile(t_combine3$X1,0.999)))+
#   geom_vline(xintercept = A$bmd[1],linetype="longdash")+
#   scale_fill_manual(
#     name = "Probability",
#     values = c("#FF0000A0", "#A0A0A0A0", "#FF0000A0"),
#     labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
#   )+
#   labs(x="Dose Level (Dotted Line : MA BMD)",y="", title="Density plots for each fitted model (Fit type: MCMC)")+theme_classic()
#
#
# p2<-p+
#   stat_density_ridges(data=t_combine3, aes(x=X1, y=fct_reorder(X2,X3,.desc=T), fill = factor(stat(quantile))),
#                       geom = "density_ridges_gradient",
#                       calc_ecdf = TRUE, quantiles = c(0.025, 0.975), scale=0.5
#   )+ scale_fill_manual(
#     name = "Probability",
#     values = c("#FF0000A0", "NA", "#FF0000A0"),
#     labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
#   )+theme(legend.position="none")
#
return(p2) # Return output
}
.plot.density.BMDcontinous_MA_MCMC(A)
.plot.density.BMDcontinous_MA_MCMC(BB)
c
BB
BB$Individual_Model_1
BB$Individual_Model_2
BB$Individual_Model_1
