bnd
bmd
BB$bmd
bmd[1]
BB$bmd
?ma_mean
ma_mean
temp
temp_bmd
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
temp
Dens =  density(temp,cut=c(max(test_doses)))
Dens
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
temp
Dens
Dens$x
# I guess based on my understanding we do not need Density plot for laplace fitting case - SL
# Aesthetically, why it dosen't show the other bmd line?
plot(B)
# Updated 06/02/21
.plot.BMDcont_fit_maximized(B)
# I guess based on my understanding we do not need Density plot for laplace fitting case - SL
# Aesthetically, why it dosen't show the other bmd line?
plot(B)
# Updated 06/02/21
.plot.BMDcont_fit_maximized(B)
B$bmd
BB$bmd
B$bmd
model_list  = data.frame(model_list = c(rep("hill",2),rep("exp-3",2),rep("exp-5",2),rep("power",2)),
distribution_list =  c(c("normal","normal-ncv"),rep(c("normal","normal-ncv"),2),
"normal", "normal-ncv"))
# How about the log scale?
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "mcmc",BMR = 2,model_list = model_list )
plot(BB)
BB$bmd
# How about the log scale?
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "mcmc",BMR = 2.05,model_list = model_list )
BB$bmd
# How about the log scale?
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "mcmc",BMR = 2,model_list = model_list )
BB$posterior_probs
B$bmd
plot(BB$Individual_Model_6)
plot(BB$Individual_Model_5)
# I guess based on my understanding we do not need Density plot for laplace fitting case - SL
# Aesthetically, why it dosen't show the other bmd line?
plot(B)
B$bmd
B  <- single_continuous_fit(as.matrix(doses),as.matrix(v1),model_type = "hill", distribution="normal-ncv",fit_type = "laplace",BMR = 1,sstat = F,isFast = FALSE)
# I guess based on my understanding we do not need Density plot for laplace fitting case - SL
# Aesthetically, why it dosen't show the other bmd line?
plot(B)
# Updated 06/02/21
.plot.BMDcont_fit_maximized(B)
# Should be matched with BMD_MA plots
# SL 06/02 Updated
# Later, we'll have it
density_col="blueviolet"
credint_col="azure2"
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
#plot the model average curve
if ("BMDcontinuous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples)
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/200);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses,decrease)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
temp_f[is.infinite(temp_f)] = NA
temp_f[abs(temp_f) > 1e10] = NA
# If temp_bmd== Inf then delete;
# Updated 06/02/21 SL
temp_bmd[is.infinite(temp_bmd)] = NA
me <- apply(temp_f,2,quantile, probs = 0.5,na.rm = TRUE) # BMD
lq <- apply(temp_f,2,quantile, probs = qprob,na.rm = TRUE) # BMDL
uq <- apply(temp_f,2,quantile, probs = 1-qprob,na.rm = TRUE) # BMDU
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
plot_gg<-plot_gg+
geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
# Updated to remove Inf bmd 06/02/21 SL
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
# Compare this with BMD sample case- SL
# Why this number is so different ?
BB$bmd
## Plot the CDF of the Posterior
## SL's comment- I think we already have MCMC sample, and we can plot bmd directly from samples
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
# Density only creates few data points SL
Dens =  density(temp,cut=c(max(test_doses)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))+xlim(c(0,15))
plot_gg<-plot_gg+
stat_density_ridges(aes(x=temp))
## Add super imposed density plot instead of using polygon...
plot_gg<-plot_gg+
geom_polygon(aes(x=c(max(0,min(D1_x)),D1_x,max(0,min(D1_x))),
y=c(min(Response),min(Response)+D1_y*scale,min(Response))),
fill = "blueviolet", alpha=0.6)
}
##
# Add lines to the BMD
ma_mean <- splinefun(test_doses,me)
ma_BMD = A$bmd
plot_gg = plot_gg +
geom_segment(aes(x=A$bmd, y=ma_mean(A$bmd), xend=A$bmd, yend=min(Response)),color="Red")
plot_gg = plot_gg +
geom_segment(aes(x=bmd, y=ma_mean(bmd), xend=bmd, yend=min(Response)),color="Red")
#Plot only level >2
df<-NULL
# Problem of the loop using this case- the ggplot is not added automatically,
# It replaces the last one;
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-3"){
temp = fit$fitted_model$parameters
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
plot_gg<- plot_gg+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
}
}
}
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples)
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/200);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses,decrease)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
temp_f[is.infinite(temp_f)] = NA
temp_f[abs(temp_f) > 1e10] = NA
# If temp_bmd== Inf then delete;
# Updated 06/02/21 SL
temp_bmd[is.infinite(temp_bmd)] = NA
me <- apply(temp_f,2,quantile, probs = 0.5,na.rm = TRUE) # BMD
lq <- apply(temp_f,2,quantile, probs = qprob,na.rm = TRUE) # BMDL
uq <- apply(temp_f,2,quantile, probs = 1-qprob,na.rm = TRUE) # BMDU
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
plot_gg
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses,decrease)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
temp_f[is.infinite(temp_f)] = NA
temp_f[abs(temp_f) > 1e10] = NA
# If temp_bmd== Inf then delete;
# Updated 06/02/21 SL
temp_bmd[is.infinite(temp_bmd)] = NA
me <- apply(temp_f,2,quantile, probs = 0.5,na.rm = TRUE) # BMD
lq <- apply(temp_f,2,quantile, probs = qprob,na.rm = TRUE) # BMDL
uq <- apply(temp_f,2,quantile, probs = 1-qprob,na.rm = TRUE) # BMDU
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
plot_gg<-plot_gg+
geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
# Updated to remove Inf bmd 06/02/21 SL
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
# Compare this with BMD sample case- SL
# Why this number is so different ?
BB$bmd
bb
bmd
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
# Density only creates few data points SL
Dens =  density(temp,cut=c(max(test_doses)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))+xlim(c(0,15))
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
# Density only creates few data points SL
Dens =  density(temp,cut=c(max(test_doses)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))+xlim(c(0,15))
plot_gg<-plot_gg+
stat_density_ridges(aes(x=temp))
plot_gg
plot_gg<-plot_gg+
stat_density_ridges(aes(x=temp))
plot_gg
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))+xlim(c(0,15))
plot_gg
temp_bmd
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
temp
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
D1_x
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))+xlim(c(0,15))
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))
temp
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
ggplot()+
geom_density(aes(x=temp))+xlim(c(0,15))
Dens =  density(temp,cut=c(max(test_doses)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
## Add super imposed density plot instead of using polygon...
plot_gg<-plot_gg+
geom_polygon(aes(x=c(max(0,min(D1_x)),D1_x,max(0,min(D1_x))),
y=c(min(Response),min(Response)+D1_y*scale,min(Response))),
fill = "blueviolet", alpha=0.6)
plot_gg
plot(Dens)
plot(Dens)+scale_x_log10()
temp_f[is.infinite(temp_f)] = NA
temp_f[abs(temp_f) > 1e10] = NA
# If temp_bmd== Inf then delete;
# Updated 06/02/21 SL
temp_bmd[is.infinite(temp_bmd)] = NA
me <- apply(temp_f,2,quantile, probs = 0.5,na.rm = TRUE) # BMD
lq <- apply(temp_f,2,quantile, probs = qprob,na.rm = TRUE) # BMDL
uq <- apply(temp_f,2,quantile, probs = 1-qprob,na.rm = TRUE) # BMDU
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
plot_gg<-plot_gg+
geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
# Updated to remove Inf bmd 06/02/21 SL
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
# Compare this with BMD sample case- SL
# Why this number is so different ?
BB$bmd
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
# Density only creates few data points SL
Dens =  density(temp,cut=c(max(test_doses)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
## Add super imposed density plot instead of using polygon...
plot_gg<-plot_gg+
geom_polygon(aes(x=c(max(0,min(D1_x)),D1_x,max(0,min(D1_x))),
y=c(min(Response),min(Response)+D1_y*scale,min(Response))),
fill = "blueviolet", alpha=0.6)
plot_gg
D1_x
max(D1_x)
# Density only creates few data points SL
Dens =  density(temp,cut=c(max(test_doses)), n=512, from=0, to=12)
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
# Density only creates few data points SL
Dens =  density(temp,cut=c(max(test_doses)), n=512, from=0, to=12)
# Density only creates few data points SL
Dens =  density(temp,cut=c(max(test_doses)), n=512, from=0, to=max(test_doses))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
## Add super imposed density plot instead of using polygon...
plot_gg<-plot_gg+
geom_polygon(aes(x=c(max(0,min(D1_x)),D1_x,max(0,min(D1_x))),
y=c(min(Response),min(Response)+D1_y*scale,min(Response))),
fill = "blueviolet", alpha=0.6)
plot_gg
##
# Add lines to the BMD
ma_mean <- splinefun(test_doses,me)
ma_BMD = A$bmd
plot_gg = plot_gg +
geom_segment(aes(x=A$bmd, y=ma_mean(A$bmd), xend=A$bmd, yend=min(Response)),color="Red")
plot_gg = plot_gg +
geom_segment(aes(x=bmd, y=ma_mean(bmd), xend=bmd, yend=min(Response)),color="Red")
df<-NULL
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-3"){
temp = fit$fitted_model$parameters
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
plot_gg<- plot_gg+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
}
}
plot_g
plot_gg
