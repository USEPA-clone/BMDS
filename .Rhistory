}
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
}
me <- colSums(temp_f)
lines(test_doses,me,lwd=2)
temp_fit <- splinefun(test_doses,me)
bmds <- splinefun(A$ma_bmd[,2],A$ma_bmd[,1])
temp_bmd <- bmds(runif(3000,0,max(A$ma_bmd[,2])))
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
}
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#plot the individual models proportional to their weight
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
f <- cont_exp_3_f(fit$parameters,test_doses)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral2',A$posterior_probs[ii])
lines(test_doses,f,col=col,lwd = 2)
}
}
if (ncol(fit$data) ==4){
points(doses,mean)
arrows(x0=doses, y0=lerror, x1=doses,
y1=uerror, code=3, angle=90, length=0.1)
}else{
points(doses,Response,pch=16)
}
}
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
plot(A)
density_col="blueviolet"
credint_col="azure2"
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
if (ncol(fit$data) == 4 ){ #sufficient statistics
mean <- fit$data[,2,drop=F]
se   <- fit$data[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = fit$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$data[,2,drop=F]
doses = fit$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
if (fit$model=="FUNL"){
me <- cont_FUNL_f(fit$parameters,test_doses)
}
class(A)
density_col="blueviolet"
credint_col="azure2"
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
if (ncol(fit$data) == 4 ){ #sufficient statistics
mean <- fit$data[,2,drop=F]
se   <- fit$data[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = fit$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$data[,2,drop=F]
doses = fit$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
if (ncol(fit$data) == 4){ #sufficient statistics
mean <- fit$data[,2,drop=F]
se   <- fit$data[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = fit$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n')
}else{
Response <- fit$data[,2,drop=F]
doses = fit$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
fit<-A
density_col="blueviolet"
credint_col="azure2"
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
if (ncol(fit$data) == 4){ #sufficient statistics
mean <- fit$data[,2,drop=F]
se   <- fit$data[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = fit$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$data[,2,drop=F]
doses = fit$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
(ncol(fit$data) == 4_
(ncol(fit$data) == 4)
ncol(fit$data)
A$Individual_Model_1$data
if (ncol(fit$Individual_Model_1$data) == 4){ #sufficient statistics-Argument entry fixed
mean <- fit$data[,2,drop=F]
se   <- fit$data[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = fit$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$data[,2,drop=F]
doses = fit$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
.plot.BMDcont_fit_MCMC<-function(fit,qprob=0.05,...){
density_col="blueviolet"
credint_col="azure2"
BMD_DENSITY = T
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
if (ncol(fit$data) == 4 ){ #sufficient statistics
mean <- fit$data[,2,drop=F]
se   <- fit$data[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = fit$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$data[,2,drop=F]
doses = fit$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
if (fit$model=="FUNL"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_FUNL_f, d=test_doses)
}
if (fit$model=="hill"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_hill_f, d=test_doses)
}
if (fit$model=="exp-3"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_exp_3_f, d=test_doses)
}
if (fit$model=="exp-5"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_exp_5_f, d=test_doses)
}
if (fit$model=="power"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_power_f, d=test_doses)
}
Q <- t(Q)
me <- colMeans(Q)
lq <- apply(Q,2,quantile, probs = qprob)
uq <- apply(Q,2,quantile, probs = 1-qprob)
temp_fit <- splinefun(test_doses,me)
polygon(c(test_doses,test_doses[length(test_doses):1]),
c(uq,lq[length(test_doses):1]),col = credint_col,border=credint_col)
lines(test_doses,me)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(fit$bmd[1],fit$bmd[1]),c(0,temp_fit(fit$bmd[1])))
lines( c(fit$bmd[2],fit$bmd[2]),c(0,temp_fit(fit$bmd[2])))
lines( c(fit$bmd[3],fit$bmd[3]),c(0,temp_fit(fit$bmd[3])))
}
if (BMD_DENSITY ==TRUE){
temp = fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp = temp[!is.infinite(temp)]
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
}
if (ncol(fit$data) ==4){
points(doses,mean,...)
arrows(x0=doses, y0=lerror, x1=doses,
y1=uerror, code=3, angle=90, length=0.1)
}else{
points(doses,Response,...)
}
}
.plot.BMDcont_fit_MCMC(A)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
.plot.BMDcont_fit_MCMC(A)
plot(A)
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
plot(A)
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
# Case 1: Dichotomous - MCMC Fitting
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# Test 2. Dichotomous MA Density Plot
.plot.density.BMDdichotomous_MA_MCMC(A)
# Base plot
plot(A)
# Test 2. Dichotomous MA Density Plot
.plot.density.BMDdichotomous_MA_MCMC(A)
# Base plot
plot(A)
density_col="blueviolet"
credint_col="azure2"
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
A
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
fit<-A
density_col="blueviolet"
credint_col="azure2"
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
if (ncol(fit$Individual_Model_1$data) == 4){ #sufficient statistics-Argument entry fixed
mean <- fit$data[,2,drop=F]
se   <- fit$data[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = fit$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$data[,2,drop=F]
doses = fit$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
ncol(fit$Individual_Model_1$data) == 4
ncol(fit$Individual_Model_1$data)
fit$Individual_Model_1$data
#sufficient statistics- This part dosen't makes senseArgument entry fixed
if (ncol(fit$Individual_Model_1$data) == 4){
mean <- fit$Individual_Model_1$data[,2,drop=F]
se   <- fit$Individual_Model_1$data[,4,drop=F]/sqrt(fit$Individual_Model_1$data[,3,drop=F])
doses = fit$Individual_Model_1$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$Individual_Model_1$data[,2,drop=F]
doses = fit$Individual_Model_1$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
fit$Individual_Model_1$data[,2,drop=F]
fit$Individual_Model_1$data[,1,drop=F]
#sufficient statistics- This part dosen't makes senseArgument entry fixed
if (ncol(fit$Individual_Model_1$data) == 4){
mean <- fit$Individual_Model_1$data[,2,drop=F]
se   <- fit$Individual_Model_1$data[,4,drop=F]/sqrt(fit$Individual_Model_1$data[,3,drop=F])
doses = fit$Individual_Model_1$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- fit$Individual_Model_1$data[,2,drop=F]
doses = fit$Individual_Model_1$data[,1,drop=F]
plot(doses,Response,type='n',...)
}
#sufficient statistics- This part dosen't makes senseArgument entry fixed
if (ncol(fit$Individual_Model_1$data) == 4){
mean <- fit$Individual_Model_1$data[,2,drop=F]
se   <- fit$Individual_Model_1$data[,4,drop=F]/sqrt(fit$Individual_Model_1$data[,3,drop=F])
doses = fit$Individual_Model_1$data[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n')
}else{
Response <- fit$Individual_Model_1$data[,2,drop=F]
doses = fit$Individual_Model_1$data[,1,drop=F]
plot(doses,Response,type='n')
}
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
# Case 1: Dichotomous - MCMC Fitting
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# Test 2. Dichotomous MA Density Plot
.plot.density.BMDdichotomous_MA_MCMC(A)
# Base plot
plot(A)
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# This part should be double checked. Laplace fitting is not consistent with other fitting model
.plot.density.BMDdichotomous_MA_maximized(A)
# This one shows the CDF of BMD
A$Fitted_Model_1$bmd_dist
# Base plot needs to be fixed too. It has issue with Model- MA representation.
plot(A)
# This is point estimates 50% , 5%, 95%...
# How can we set MA sample desnity plot from the output data from here?
A$Fitted_Model_1$bmd
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
# Bit weird result FUNL- Almost 1 other cases is 0;
.plot.density.BMDcontinous_MA_MCMC(A)
# Base object should be updated by using Shiny App
A$posterior_probs
#It is dominated by the FUNL model. While the other 4 models are minor
# This continous baseplot should be updated
plot(A)
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
plot(A)
View(ma_continuous_fit)
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
# Bit weird result FUNL- Almost 1 other cases is 0;
.plot.density.BMDcontinous_MA_MCMC(A)
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
# Case 1: Dichotomous - MCMC Fitting
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# Test 2. Dichotomous MA Density Plot
.plot.density.BMDdichotomous_MA_MCMC(A)
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
# Bit weird result FUNL- Almost 1 other cases is 0;
.plot.density.BMDcontinous_MA_MCMC(A)
#It is dominated by the FUNL model. While the other 4 models are minor
# This continous baseplot should be updated
plot(A)
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
# Bit weird result FUNL- Almost 1 other cases is 0;
.plot.density.BMDcontinous_MA_MCMC(A)
# Base object should be updated by using Shiny App
A$posterior_probs
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
plot(D,Y)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
source('~/RBMDS/SL_data_viz_test.R', echo=TRUE)
A$Individual_Model_2$bmd
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
A$Individual_Model_2$bmd
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
A$Individual_Model_2$bmd
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
A$Individual_Model_2$bmd
A<-ma_continuous_fit(D,Y,fit_type="mcmc",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL"),
distribution_list = c(rep("normal",5)))
A$Individual_Model_2$bmd
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDcontinous_MA(A)
A$Individual_Model_2$bmd
# Base object should be updated by using Shiny App
A$posterior_probs
# Bit weird result FUNL- Almost 1 other cases is 0;
.plot.density.BMDcontinous_MA_MCMC(A)
A$posterior_probs
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# Base plot needs to be fixed too. It has issue with Model- MA representation.
plot(A)
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
# Case 1: Dichotomous - MCMC Fitting
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# Test 2. Dichotomous MA Density Plot
.plot.density.BMDdichotomous_MA_MCMC(A)
# Base plot
plot(A)
# Base plot
plot(A)
