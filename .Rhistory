if ("BMDcontinuous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples);
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
#plot(dose,Response,type='n')#,...)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
}
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
me <- colMeans(temp_f)
lq <- apply(temp_f,2,quantile, probs = qprob)
uq <- apply(temp_f,2,quantile, probs = 1-qprob)
col1 = alphablend(credint_col,1)
# Data structure for polygon - this part should be re-implmeneted as ggplot object
out<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(dose),max(dose)*1.03))+
labs(x="Dose", y="Proportion",title="Continous MA fitting")+
theme_minimal()
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/500)
out2<-out+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
out3<-out2+geom_smooth(aes(x=test_doses,y=me),col="blue")+
geom_polygon(aes(x=c(test_doses[length(test_doses):1],test_doses),y=c(uq[length(test_doses):1],lq)),fill="blue",alpha=0.1)
#polygon(c(test_doses,test_doses[length(test_doses):1]),
#        c(uq,lq[length(test_doses):1]),col = col1,border=col1)
lines(test_doses,me,lwd=2)
temp_fit <- splinefun(test_doses,me)
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
}
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
temp = temp[temp < 20 * max_dose]
#return(temp)
#print(c(max(temp),median(temp),min(temp)))
Dens =  density(temp,cut=c(quantile(temp,0.995,na.rm = TRUE)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
#polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
out4<-out3+geom_polygon(aes(x=c(0,D1_x,max(doses)),y=c(0,D1_y,0)), fill = "lightblue", alpha=0.7)
# GGplot line -
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-3"){
f <- cont_exp_3_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
out4<-out4+geom_lines(aes(x=test_doses,y=f,colour=col))
}
out4
}else{
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
temp_f   <- matrix(0,length(fit_idx),length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
# plot(dose,Response,type='n',...)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
#plot(doses,Response,type='n',...)
}
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
}
me <- colSums(temp_f)
lines(test_doses,me,lwd=2)
temp_fit <- splinefun(test_doses,me)
bmds <- splinefun(A$ma_bmd[,2],A$ma_bmd[,1])
temp_bmd <- bmds(runif(3000,0,max(A$ma_bmd[,2])))
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
}
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#plot the individual models proportional to their weight
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
f <- cont_exp_3_f(fit$parameters,test_doses)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral2',A$posterior_probs[ii])
lines(test_doses,f,col=col,lwd = 2)
}
}
principal<-40000
principal+principal*1.2+principal*(1.2**2)
exit
()
library(ToxicR)
library(ggridges)
library(forcats)
library(ggplot2)
library(dplyr)
source('~/RBMDS/SL_data_viz_test.R')
source('~/RBMDS/SL_data_viz_test.R')
library(ToxicR)
library(ggridges)
library(forcats)
library(ggplot2)
library(dplyr)
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
# Continous single fit is required to be tested
single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = T, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
# - Normal, 1-SD, CV
c2priorE5_1SD_opt1<-  matrix(c(0, 34.9048, 1, 0, 1e8, # a
0, 0.0021172, 1, 0, 1e8,     # b
0, 5.62604, 1, 0, 1e8,    # log(c)
0, 1.5301, 0, 1, 1000, #d
0, 2.19817 , 1, -1000, 1000) # ln-alpha
,5,5,byrow=T)
# - Normal, 1-SD, NCV
c2priorE5_1SD_opt2<-  matrix(c(0, 36.98, 1, 0, 1e8, # a
0, 0.584556, 1, 0, 1e8,     # b
0, 4, 1, 0, 1e8,    # log(c)
0, 1.57314, 1, 1, 1000, #d
0, 0.870443, 1, -1000, 1000, # rho
0, -1.36684, 1, -1000, 1000) # ln-alpha
,6,5,byrow=T)
# - Log-normal, 1-SD
c2priorE5_1SD_opt3<-  matrix(c(0, 35.4338, 1, 0, 1e8, # a
0, 0.437486, 1, 0, 100,     # b
0, 7, 1, 0, 100,    # log(c)
0, 2, 1, 1, 100, #d
0, -5.33291, 1, -1000, 1000) # ln-alpha
,5,5,byrow=T)
print("Running EXP-5 Opt1")
c2_E5_opt1_res <- bmd_single_continuous('exp-5', 'STDev', BMRF = 1, bkg_prob=-9999,
PR=c2priorE5_1SD_opt1, DATA=cbind(c2_doses,c2_y), sstat=c2ss,
constVar=T, is_log_normal=F, alpha=0.05)
c2_E5_opt1_res <- single_continuous_fit('exp-5', 'STDev', BMRF = 1, bkg_prob=-9999,
PR=c2priorE5_1SD_opt1, DATA=cbind(c2_doses,c2_y), sstat=c2ss,
constVar=T, is_log_normal=F, alpha=0.05)
c2ss <- F # Individual dose-response data
c2_doses <- c(0,0,0,0,18,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,40,40,40,40,40)
c2_y <- c(39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,35.9,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,55.1,59.1,56.3,52.9,53.7)
c2_max_dose<-max(c2_doses)
# - Normal, 1-SD, CV
c2priorE3_1SD_opt1<-  matrix(c(0, 34.9048, 1, 0, 1e8, # a
0, 0.464051, 1, 0, 1e8,     # b
0, 4, 1, 0, 1e8,    # log(c)
0, 1, 0, 1, 1000, #d
0, 2.19817 , 1, -1000, 1000) # ln-alpha
,5,5,byrow=T)
# - Normal, 1-SD, NCV
c2priorE3_1SD_opt2<-  matrix(c(0, 36.98, 1, 0, 1e8, # a
0, 0.584556, 1, 0, 1e8,     # b
0, 4, 1, 0, 1e8,    # log(c)
0, 1.57314, 1, 1, 1000, #d
0, 0.870443, 1, -1000, 1000, # rho
0, -1.36684, 1, -1000, 1000) # ln-alpha
,6,5,byrow=T)
# - Log-normal, 1-SD
c2priorE3_1SD_opt3<-  matrix(c(0, 35.4338, 1, 0, 1e8, # a
0, 0.437486, 1, 0, 100,     # b
0, 7, 1, 0, 100,    # log(c)
0, 2, 1, 1, 100, #d
0, -5.33291, 1, -1000, 1000) # ln-alpha
,5,5,byrow=T)
print("Running EXP-3 Opt1")
c2_E3_opt1_res <- bmd_single_continuous('exp-3', 'STDev', BMRF = 1, bkg_prob=-9999,
PR=c2priorE3_1SD_opt1, DATA=cbind(c2_doses,c2_y), sstat=c2ss,
constVar=T, is_log_normal=F, alpha=0.05)
c2_E3_opt1_res <- single_continuous_fit('exp-3', 'STDev', BMRF = 1, bkg_prob=-9999,
PR=c2priorE3_1SD_opt1, DATA=cbind(c2_doses,c2_y), sstat=c2ss,
constVar=T, is_log_normal=F, alpha=0.05)
View(single_continuous_fit)
# Continous single fit is required to be tested
single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = T, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = T, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
source('~/RBMDS/SL_data_viz_test.R')
source('~/RBMDS/SL_data_viz_test.R')
install.packages("~/RBMDS/ToxicR_1.0 (2).tgz", repos = NULL, type = .Platform$pkgType)
remove.packages(ToxicR)
remove.packages(ToxicR)
remove.packages(ToxicR,lib)
uninstall.packages(ToxicR,lib)
remove.packages("ToxicR")
remove.packages("ToxicR",lib)
remove.packages("ToxicR")
install.packages("~/RBMDS/ToxicR_1.0 (2).tgz", repos = NULL, type = .Platform$pkgType)
library(ToxicR)
# Load packages
library(ToxicR)
library(ggridges)
library(forcats)
library(ggplot2)
library(dplyr)
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
A_single_mcmc<-single_dichotomous_fit(mData[,1],mData[,2],mData[,3], model_type="hill",fit_type="mcmc")
.plot.BMDdich_fit_MCMC(A_single_mcmc)
# Single model fitting- Laplace
A_single_laplace = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type="hill",fit_type = "laplace")
.plot.BMDdich_fit_maximized(A_single_laplace)
# Dichotomous - Model Average
# Case 1: Dichotomous - MCMC Fitting
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# Test 2. Dichotomous MA Density Plot - Update for base-color later
.plot.density.BMDdichotomous_MA_MCMC(A)
#Base plot - MA density seems little bit odd
.plot.BMDdichotomous_MA(A)
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Test 1. Dichotomous MA Clevland Plot-- For laplace case/works
.cleveland_plot.BMDdichotomous_MA(A)
# This part needs to be double checked & density part should be re-derived
# - Code / Need to assign dynamically
.plot.BMDdichotomous_MA(A)
# This part needs to be double checked & density part should be re-derived
# - Code / Need to assign dynamically
.plot.BMDdichotomous_MA(A)
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Test 1. Dichotomous MA Clevland Plot-- For laplace case/works
.cleveland_plot.BMDdichotomous_MA(A)
# This part needs to be double checked & density part should be re-derived
# - Code / Need to assign dynamically
plot(A)
#Base plot - MA density seems little bit odd
.plot.BMDdichotomous_MA(A)
# Dichotomous - Model Average
# Case 1: Dichotomous - MCMC Fitting
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
# Test 2. Dichotomous MA Density Plot - Update for base-color later
.plot.density.BMDdichotomous_MA_MCMC(A)
#Base plot - MA density seems little bit odd
.plot.BMDdichotomous_MA(A)
# Test 2. Dichotomous MA Density Plot - Update for base-color later
.plot.density.BMDdichotomous_MA_MCMC(A)
#Base plot - MA density seems little bit odd
.plot.BMDdichotomous_MA(A)
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Test 1. Dichotomous MA Clevland Plot-- For laplace case/works
.cleveland_plot.BMDdichotomous_MA(A)
# This part needs to be double checked & density part should be re-derived
# - Code / Need to assign dynamically
.plot.BMDdichotomous_MA(A)
# This one shows the CDF of BMD
A$Fitted_Model_1$bmd_dist
# Base plot needs to be fixed too. It has issue with Model- MA representation.
plot(A)
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
plot(D,Y)
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = T, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = T, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
View(single_continuous_fit())
View(single_continuous_fit
)
c2ss <- F # Individual dose-response data
c2_doses <- c(0,0,0,0,18,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,40,40,40,40,40)
c2_y <- c(39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,35.9,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,55.1,59.1,56.3,52.9,53.7)
c2_max_dose<-max(c2_doses)
# - Normal, 1-SD, CV
c2priorE3_1SD_opt1<-  matrix(c(0, 34.9048, 1, 0, 1e8, # a
0, 0.464051, 1, 0, 1e8,     # b
0, 4, 1, 0, 1e8,    # log(c)
0, 1, 0, 1, 1000, #d
0, 2.19817 , 1, -1000, 1000) # ln-alpha
,5,5,byrow=T)
# - Normal, 1-SD, NCV
c2priorE3_1SD_opt2<-  matrix(c(0, 36.98, 1, 0, 1e8, # a
0, 0.584556, 1, 0, 1e8,     # b
0, 4, 1, 0, 1e8,    # log(c)
0, 1.57314, 1, 1, 1000, #d
0, 0.870443, 1, -1000, 1000, # rho
0, -1.36684, 1, -1000, 1000) # ln-alpha
,6,5,byrow=T)
# - Log-normal, 1-SD
c2priorE3_1SD_opt3<-  matrix(c(0, 35.4338, 1, 0, 1e8, # a
0, 0.437486, 1, 0, 100,     # b
0, 7, 1, 0, 100,    # log(c)
0, 2, 1, 1, 100, #d
0, -5.33291, 1, -1000, 1000) # ln-alpha
,5,5,byrow=T)
print("Running EXP-3 Opt1")
c2_E3_opt1_res <- bmd_single_continuous('exp-3', 'STDev', BMRF = 1, bkg_prob=-9999,
PR=c2priorE3_1SD_opt1, DATA=cbind(c2_doses,c2_y), sstat=c2ss,
constVar=T, is_log_normal=F, alpha=0.05)
remove.packages("ToxicR")
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
plot(D,Y)
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = T, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
A_single_mcmc<-single_dichotomous_fit(mData[,1],mData[,2],mData[,3], model_type="hill",fit_type="mcmc")
.plot.BMDdich_fit_MCMC(A_single_mcmc)
# Single model fitting- Laplace
A_single_laplace = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type="hill",fit_type = "laplace")
.plot.BMDdich_fit_maximized(A_single_laplace)
source('~/RBMDS/SL_data_viz_test.R')
remove.packages("ToxicR")
install.packages("~/RBMDS/ToxicR_1.0(2).tgz", repos = NULL, type = "source")
install.packages("~/RBMDS/ToxicR_1.0(2).zip", repos = NULL, type = "source")
install.packages("~/RBMDS/ToxicR_1.0(2).tgz",  type = "source")
version()
install.packages("~/RBMDS/ToxicR_1.0(2).tgz",  type = "source")
install.packages("~/RBMDS/ToxicR_1.0(2).tgz", repos = NULL, type = "source")
install.packages("~/RBMDS/ToxicR_1.0(2).tgz",  type = "source")
c3Dat <- matrix(0,nrow=5,ncol=4)
colnames(c3Dat) <- c("Dose","Resp","N","StDev")
c3Dat[, 1] <- c(0, 35, 105, 316, 625)
c3Dat[, 2] <- c(1.61, 1.66, 1.75, 1.81, 1.89)
c3Dat[, 3] <- 2
c3Dat[, 4] <- c(0.12, 0.13, 0.11, 0.15, 0.13)
c3Dat[, 4] <- 5
c3Dat[, 3] <- c(0.12, 0.13, 0.11, 0.15, 0.13)
c3_max_dose<-max(c3Dat[, 1])
print("Running EXP-3 Opt1")
BB <- single_continuous_fit(as.matrix(c3Dat[, 1]),c3Dat[, 2:4],model_type = "exp-5",
distribution="normal-ncv",fit_type = "mle",sstat = T)
# Sample Data - Dichotomous Example
mData <- matrix(c(0, 2,50,
1, 2,50,
3, 10, 50,
16, 18,50,
32, 18,50,
33, 17,50),nrow=6,ncol=3,byrow=T)
# Load packages
library(ToxicR)
install.packages("~/RBMDS/ToxicR_1.0 (2).tgz", repos = NULL, type = .Platform$pkgType)
# Load packages
library(ToxicR)
library(ggridges)
library(forcats)
library(ggplot2)
library(dplyr)
c3ss <- T # Summarized dose-response data
c3Dat <- matrix(0,nrow=5,ncol=4)
colnames(c3Dat) <- c("Dose","Resp","N","StDev")
c3Dat[, 1] <- c(0, 35, 105, 316, 625)
c3Dat[, 2] <- c(1.61, 1.66, 1.75, 1.81, 1.89)
c3Dat[, 3] <- 2
c3Dat[, 4] <- c(0.12, 0.13, 0.11, 0.15, 0.13)
c3Dat[, 4] <- 5
c3Dat[, 3] <- c(0.12, 0.13, 0.11, 0.15, 0.13)
c3_max_dose<-max(c3Dat[, 1])
print("Running EXP-3 Opt1")
BB <- single_continuous_fit(as.matrix(c3Dat[, 1]),c3Dat[, 2:4],model_type = "exp-5",
distribution="normal-ncv",fit_type = "mle",sstat = T)
BB
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = T, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
single_continuous_fit()
c3Dat
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL",SSAT=F),
distribution_list = c(rep("normal",5)))
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL",SSAT=F),
)
plot(A)
A<-ma_continuous_fit(D,Y,fit_type="laplace",samples=25000,burnin=2500,BMR=0.1,BMD_TYPE='sd',
model_list = c("hill", "exp-3", "exp-5", "power", "FUNL",SSAT=F),
)
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = F, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
D <-c(rep(seq(0,1.0,1/4),each=4))
mean <- 2.3  + 10/(1+exp(-(D-0.60)*8))*(1/(1+exp(-(0.99-D)*13)))
Y <- mean + rnorm(length(mean),0,0.7)
plot(D,Y)
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = F, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
View(single_continuous_fit)
# Continous single fit is required to be tested
k<-single_continuous_fit(D, Y, model_type = "hill", fit_type = "mcmc", prior = "default",
BMD_TYPE = "sd", sstat = F, BMR = 0.1, point_p = 0.01, distribution = "normal-ncv",
alpha = 0.05, samples = 21000, degree = 2, burnin = 1000)
