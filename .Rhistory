temp_f[ii,] <- cont_exp_3_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
}
me <- colSums(temp_f)
lines(test_doses,me,lwd=2)
temp_fit <- splinefun(test_doses,me)
bmds <- splinefun(A$BMD_CDF[,2],A$BMD_CDF[,1])
temp_bmd <- bmds(runif(3000,0,max(A$BMD_CDF[,2])))
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
}
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#plot the individual models proportional to their weight
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
f <- cont_exp_3_f(fit$parameters,test_doses)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral2',A$posterior_probs[ii])
lines(test_doses,f,col=col,lwd = 2)
}
}
points(doses,probs)
arrows(x0=doses, y0=lerror, x1=doses,
y1=uerror, code=3, angle=90, length=0.1)
return(temp_f)
}
plot.BMDdichotomous_MA(B)
plot.BMDdichotomous_MA <- function(A,qprob=0.05,...){
density_col="blueviolet"
credint_col="azure2"
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
#plot the model average curve
if ("BMDdichotomous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples);
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
print(dim(temp_f))
temp_bmd <- rep(0,length(test_doses))
probs <- (0.5+data_d[,2,drop=T])/(1.0 + data_d[,3,drop=T])
se <- sqrt(probs*(1-probs)/data_d[,3,drop=T])
doses = data_d[,1,drop=T]
uerror <- apply(cbind(probs*0+1,probs+se),1,min)
lerror <- apply(cbind(probs*0,probs-se),1,max)
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',main=fit$full_model...)
print(n_samps)
print(length(fit_idx))
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="hill"){
temp_f[ii,] <- dich_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="gamma"){
temp_f[ii,] <- dich_gamma_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model == "logistic"){
temp_f[ii,] <- dich_logist_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="log-logistic"){
temp_f[ii,] <- dich_llogist_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="probit"){
temp_f[ii,] <- dich_probit_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="log-probit"){
temp_f[ii,] <- dich_lprobit_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="multistage"){
temp_f[ii,] <-dich_multistage_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="qlinear"){
temp_f[ii,] <-dich_qlinear_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="weibull"){
temp_f[ii,] <-dich_weibull_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
me <- colMeans(temp_f)
lq <- apply(temp_f,2,quantile, probs = qprob)
uq <- apply(temp_f,2,quantile, probs = 1-qprob)
col1 = alphablend(credint_col,1)
polygon(c(test_doses,test_doses[length(test_doses):1]),
c(uq,lq[length(test_doses):1]),col = col1,border=col1)
lines(test_doses,me,lwd=2)
temp_fit <- splinefun(test_doses,me)
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
}
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
temp = temp[temp < 30*max(doses)]
Dens =  density(temp,cut=c(quantile(temp_bmd,0.995,na.rm = TRUE)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses*30))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#plot the individual models proportional to their weight
temp_f <- rep(0,length(test_doses))
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="hill"){
temp_f <- dich_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="gamma"){
temp_f <- dich_gamma_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model == "logistic"){
temp_f <- dich_logist_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="log-logistic"){
temp_f <- dich_llogist_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="probit"){
temp_f <- dich_probit_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="log-probit"){
temp_f<- dich_lprobit_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="multistage"){
temp_f <-dich_multistage_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="qlinear"){
temp_f<-dich_qlinear_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="weibull"){
temp_f<-dich_weibull_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
lines(test_doses,temp_f,col=col,lwd = 2)
}
}else{
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
temp_f   <- matrix(0,length(fit_idx),length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',...)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
plot(doses,Response,type='n',...)
}
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$parameters,test_doses)*A$posterior_probs[ii]
}
}
me <- colSums(temp_f)
lines(test_doses,me,lwd=2)
temp_fit <- splinefun(test_doses,me)
bmds <- splinefun(A$BMD_CDF[,2],A$BMD_CDF[,1])
temp_bmd <- bmds(runif(3000,0,max(A$BMD_CDF[,2])))
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
}
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5)
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#plot the individual models proportional to their weight
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
f <- cont_exp_3_f(fit$parameters,test_doses)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral2',A$posterior_probs[ii])
lines(test_doses,f,col=col,lwd = 2)
}
}
points(doses,probs)
arrows(x0=doses, y0=lerror, x1=doses,
y1=uerror, code=3, angle=90, length=0.1)
return(temp_f)
}
plot.BMDdichotomous_MA(B)
plot.BMDdichotomous_MA <- function(A,qprob=0.05,...){
density_col="blueviolet"
credint_col="azure2"
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
#plot the model average curve
if ("BMDdichotomous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples);
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
print(dim(temp_f))
temp_bmd <- rep(0,length(test_doses))
probs <- (0.5+data_d[,2,drop=T])/(1.0 + data_d[,3,drop=T])
se <- sqrt(probs*(1-probs)/data_d[,3,drop=T])
doses = data_d[,1,drop=T]
uerror <- apply(cbind(probs*0+1,probs+se),1,min)
lerror <- apply(cbind(probs*0,probs-se),1,max)
dose = c(doses,doses)
Response = c(uerror,lerror)
plot(dose,Response,type='n',main=fit$full_model...)
print(n_samps)
print(length(fit_idx))
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="hill"){
temp_f[ii,] <- dich_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="gamma"){
temp_f[ii,] <- dich_gamma_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model == "logistic"){
temp_f[ii,] <- dich_logist_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="log-logistic"){
temp_f[ii,] <- dich_llogist_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="probit"){
temp_f[ii,] <- dich_probit_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="log-probit"){
temp_f[ii,] <- dich_lprobit_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="multistage"){
temp_f[ii,] <-dich_multistage_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="qlinear"){
temp_f[ii,] <-dich_qlinear_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="weibull"){
temp_f[ii,] <-dich_weibull_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
me <- colMeans(temp_f)
lq <- apply(temp_f,2,quantile, probs = qprob)
uq <- apply(temp_f,2,quantile, probs = 1-qprob)
col1 = alphablend(credint_col,1)
polygon(c(test_doses,test_doses[length(test_doses):1]),
c(uq,lq[length(test_doses):1]),col = col1,border=col1)
lines(test_doses,me,lwd=2)
temp_fit <- splinefun(test_doses,me)
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
}
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
temp = temp[temp < 30*max(doses)]
Dens =  density(temp,cut=c(quantile(temp_bmd,0.995,na.rm = TRUE)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses*30))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
#plot the individual models proportional to their weight
temp_f <- rep(0,length(test_doses))
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="hill"){
temp_f <- dich_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="gamma"){
temp_f <- dich_gamma_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model == "logistic"){
temp_f <- dich_logist_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="log-logistic"){
temp_f <- dich_llogist_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="probit"){
temp_f <- dich_probit_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="log-probit"){
temp_f<- dich_lprobit_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="multistage"){
temp_f <-dich_multistage_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="qlinear"){
temp_f<-dich_qlinear_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="weibull"){
temp_f<-dich_weibull_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
lines(test_doses,temp_f,col=col,lwd = 2)
}
}else{
}
points(doses,probs)
arrows(x0=doses, y0=lerror, x1=doses,
y1=uerror, code=3, angle=90, length=0.1)
}
plot.BMDdichotomous_MA(B)
library(ToxicR)
mData <- matrix(c(0, 1,10,
0.3, 4,10,
1, 4,10,
4, 7,10),nrow=4,ncol=3,byrow=T)
mData <- matrix(c(0, 1,20,
0.3, 2,20,
1, 3,20,
4, 14,50),nrow=4,ncol=3,byrow=T)
B = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
plot(B)
mData <- matrix(c(0, 1,50,
1, 2,50,
2.5, 3,50,
4, 14,50),nrow=4,ncol=3,byrow=T)
B = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
plot(B)
setwd("~/OneDrive - National Institutes of Health/ToxExpression/untitled folder/Raw read count file 24 chemical study- sent to Wheeler")
setwd("~/OneDrive - National Institutes of Health/ToxExpression")
load("~/OneDrive - National Institutes of Health/ToxExpression/untitled folder/Raw read count file 24 chemical study- sent to Wheeler/all_data.Rdata")
setwd("~/Documents/r_software/RBMDS")
library(ToxicR)
#library(rstan)
# Input data - Continuous2.dax - Individual dose-response
M =matrix(0,nrow=27,ncol=4)
colnames(M) <- c("Dose","Resp","","")
M[,1] <- c(0.1,0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,39,39,39,39,39)
M[,2] <- c(39.0,39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,55.1,59.1,56.3,52.9,53.7)
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = ma_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",BMR=2)
plot(A)
library(ToxicR)
mData <- matrix(c(0, 1,10,
0.3, 4,10,
1, 4,10,
4, 7,10),nrow=4,ncol=3,byrow=T)
mData <- matrix(c(0, 1,50,
1, 2,50,
2.5, 3,50,
4, 14,50),nrow=4,ncol=3,byrow=T)
B = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
plot(B)
plot(B$Individual_Model_5)
B = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
plot(B)
mData <- matrix(c(0, 1,10,
0.3, 4,10,
1, 4,10,
4, 7,10),nrow=4,ncol=3,byrow=T)
mData <- matrix(c(0, 1,50,
1, 2,50,
2.5, 3,50,
4, 14,50),nrow=4,ncol=3,byrow=T)
B = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
plot(B)
plot(B$Individual_Model_5)
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
D = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "logistic",fit_type = "laplace")
E = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "log-probit",fit_type = "laplace")
G = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "hill",fit_type = "mcmc")
H = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "weibull",fit_type = "mcmc")
I = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "log-logistic",fit_type = "laplace")
J = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "qlinear",fit_type = "laplace")
J = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "probit",fit_type = "laplace")
J = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "multistage",fit_type = "laplace")
plot(G)
plog(J)
plot(J)
plot(A)
M =matrix(0,nrow=27,ncol=4)
colnames(M) <- c("Dose","Resp","","")
M[,1] <- c(0.1,0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,39,39,39,39,39)
M[,2] <- c(39.0,39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,55.1,59.1,56.3,52.9,53.7)
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = ma_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",BMR=2)
plot(A)
library(ToxicR)
#library(rstan)
# Input data - Continuous2.dax - Individual dose-response
M =matrix(0,nrow=27,ncol=4)
colnames(M) <- c("Dose","Resp","","")
M[,1] <- c(0.1,0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,39,39,39,39,39)
M[,2] <- c(39.0,39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,55.1,59.1,56.3,52.9,53.7)
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = ma_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",BMR=2)
plot(A)
library(ToxicR)
mData <- matrix(c(0, 1,10,
0.3, 4,10,
1, 4,10,
4, 7,10),nrow=4,ncol=3,byrow=T)
mData <- matrix(c(0, 1,50,
1, 2,50,
2.5, 3,50,
4, 14,50),nrow=4,ncol=3,byrow=T)
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
D = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "logistic",fit_type = "laplace")
E = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "log-probit",fit_type = "laplace")
G = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "hill",fit_type = "mcmc")
H = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "weibull",fit_type = "mcmc")
I = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "log-logistic",fit_type = "laplace")
J = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "qlinear",fit_type = "laplace")
J = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "probit",fit_type = "laplace")
J = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "multistage",fit_type = "laplace")
plot(D)
plot(G)
