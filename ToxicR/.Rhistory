}
library(schnellerGP)
bob = y*0
for (ii in 1:25){
##############################
# Sample from the additive TP
for (jj in 1:(dim(TPs)[3])){
ids = 1:(dim(TPs)[3])
ids = ids[-jj]
rY = matrix(y)
for (kk in ids){
rY = rY - as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
TPs[,1,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,2,jj],x[,1],cur_tau,
lsMat[jj,1],idxs[,1],"matern")
TPs[,2,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,1,jj],x[,2],cur_tau,
lsMat[jj,2],idxs[,2],"matern")
lsMat[jj,1] = HODLR_TP_sample_ls(lsMat[jj,1],rY,TPscale[jj]*TPs[,2,jj],x[,1],
cur_tau,c(0.1,10),idxs[,1],kernel="matern")
lsMat[jj,2] = HODLR_TP_sample_ls(lsMat[jj,2],rY,TPscale[jj]*TPs[,1,jj],x[,2],
cur_tau,c(0.1,10),idxs[,2],kernel="matern")
TPscale[jj] = HODLR_TP_sample_scale(rY,TPs[,,jj],cur_tau)
}
m_mean = rY*0
for (kk in 1:(dim(TPs)[3])){
m_mean = m_mean + as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
bob = m_mean + bob/25
#sample precision assuming Ga(0.5,0.5) prior
tB = (y-m_mean); tB = 0.5*sum(tB*tB) + 0.5
tA = length(y)/2 + 0.5
cur_tau = rgamma(1,tA,tB)
}
plot3D::scatter3D(x[,1], x[,2],bob, phi=40, theta=80,pch=16)
bob = y*0
for (ii in 1:25){
##############################
# Sample from the additive TP
for (jj in 1:(dim(TPs)[3])){
ids = 1:(dim(TPs)[3])
ids = ids[-jj]
rY = matrix(y)
for (kk in ids){
rY = rY - as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
TPs[,1,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,2,jj],x[,1],cur_tau,
lsMat[jj,1],idxs[,1],"matern")
TPs[,2,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,1,jj],x[,2],cur_tau,
lsMat[jj,2],idxs[,2],"matern")
lsMat[jj,1] = HODLR_TP_sample_ls(lsMat[jj,1],rY,TPscale[jj]*TPs[,2,jj],x[,1],
cur_tau,c(0.1,10),idxs[,1],kernel="matern")
lsMat[jj,2] = HODLR_TP_sample_ls(lsMat[jj,2],rY,TPscale[jj]*TPs[,1,jj],x[,2],
cur_tau,c(0.1,10),idxs[,2],kernel="matern")
TPscale[jj] = HODLR_TP_sample_scale(rY,TPs[,,jj],cur_tau)
}
m_mean = rY*0
for (kk in 1:(dim(TPs)[3])){
m_mean = m_mean + as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
bob = m_mean + bob/25
#sample precision assuming Ga(0.5,0.5) prior
tB = (y-m_mean); tB = 0.5*sum(tB*tB) + 0.5
tA = length(y)/2 + 0.5
cur_tau = rgamma(1,tA,tB)
}
plot3D::scatter3D(x[,1], x[,2],true_mu, phi=40, theta=80,pch=16)
library(ggplot2)
library(spNNGP)
data("MI_TSCA")
head(MI_TSCA)
ggplot(data=MI_TSCA,aes(x=lat,y=long,color = WIP))+geom_point() +
scale_color_viridis_c(option="magma")
ggplot(data=MI_TSCA,aes(x=lat,y=long,color =SUP))+geom_point() +
scale_color_viridis_c(option="magma")
plot3D::scatter3D(x[,1], x[,2],true_mu, phi=40, theta=80,pch=16)
bob = y*0
for (ii in 1:25){
##############################
# Sample from the additive TP
for (jj in 1:(dim(TPs)[3])){
ids = 1:(dim(TPs)[3])
ids = ids[-jj]
rY = matrix(y)
for (kk in ids){
rY = rY - as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
TPs[,1,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,2,jj],x[,1],cur_tau,
lsMat[jj,1],idxs[,1],"matern")
TPs[,2,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,1,jj],x[,2],cur_tau,
lsMat[jj,2],idxs[,2],"matern")
lsMat[jj,1] = HODLR_TP_sample_ls(lsMat[jj,1],rY,TPscale[jj]*TPs[,2,jj],x[,1],
cur_tau,c(0.1,10),idxs[,1],kernel="matern")
lsMat[jj,2] = HODLR_TP_sample_ls(lsMat[jj,2],rY,TPscale[jj]*TPs[,1,jj],x[,2],
cur_tau,c(0.1,10),idxs[,2],kernel="matern")
TPscale[jj] = HODLR_TP_sample_scale(rY,TPs[,,jj],cur_tau)
}
m_mean = rY*0
for (kk in 1:(dim(TPs)[3])){
m_mean = m_mean + as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
bob = m_mean + bob/25
#sample precision assuming Ga(0.5,0.5) prior
tB = (y-m_mean); tB = 0.5*sum(tB*tB) + 0.5
tA = length(y)/2 + 0.5
cur_tau = rgamma(1,tA,tB)
}
plot3D::scatter3D(x[,1], x[,2],bob, phi=40, theta=80,pch=16)
HODLR_TP_sample_scale
library(schnellerGP)
for (ii in 1:25){
##############################
# Sample from the additive TP
for (jj in 1:(dim(TPs)[3])){
ids = 1:(dim(TPs)[3])
ids = ids[-jj]
rY = matrix(y)
for (kk in ids){
rY = rY - as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
TPs[,1,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,2,jj],x[,1],cur_tau,
lsMat[jj,1],idxs[,1],"matern")
TPs[,2,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,1,jj],x[,2],cur_tau,
lsMat[jj,2],idxs[,2],"matern")
lsMat[jj,1] = HODLR_TP_sample_ls(lsMat[jj,1],rY,TPscale[jj]*TPs[,2,jj],x[,1],
cur_tau,c(0.1,10),idxs[,1],kernel="matern")
lsMat[jj,2] = HODLR_TP_sample_ls(lsMat[jj,2],rY,TPscale[jj]*TPs[,1,jj],x[,2],
cur_tau,c(0.1,10),idxs[,2],kernel="matern")
TPscale[jj] = HODLR_TP_sample_scale(rY,TPs[,,jj],cur_tau)
}
m_mean = rY*0
for (kk in 1:(dim(TPs)[3])){
m_mean = m_mean + as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
bob = m_mean + bob/25
#sample precision assuming Ga(0.5,0.5) prior
tB = (y-m_mean); tB = 0.5*sum(tB*tB) + 0.5
tA = length(y)/2 + 0.5
cur_tau = rgamma(1,tA,tB)
}
plot3D::scatter3D(x[,1], x[,2],bob, phi=40, theta=80,pch=16)
bob = y*0
for (ii in 1:25){
##############################
# Sample from the additive TP
for (jj in 1:(dim(TPs)[3])){
ids = 1:(dim(TPs)[3])
ids = ids[-jj]
rY = matrix(y)
for (kk in ids){
rY = rY - as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
TPs[,1,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,2,jj],x[,1],cur_tau,
lsMat[jj,1],idxs[,1],"matern")
TPs[,2,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,1,jj],x[,2],cur_tau,
lsMat[jj,2],idxs[,2],"matern")
lsMat[jj,1] = HODLR_TP_sample_ls(lsMat[jj,1],rY,TPscale[jj]*TPs[,2,jj],x[,1],
cur_tau,c(0.1,10),idxs[,1],kernel="matern")
lsMat[jj,2] = HODLR_TP_sample_ls(lsMat[jj,2],rY,TPscale[jj]*TPs[,1,jj],x[,2],
cur_tau,c(0.1,10),idxs[,2],kernel="matern")
TPscale[jj] = HODLR_TP_sample_scale(rY,TPs[,,jj],cur_tau)
}
m_mean = rY*0
for (kk in 1:(dim(TPs)[3])){
m_mean = m_mean + as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
bob = m_mean + bob/25
#sample precision assuming Ga(0.5,0.5) prior
tB = (y-m_mean); tB = 0.5*sum(tB*tB) + 0.5
tA = length(y)/2 + 0.5
cur_tau = rgamma(1,tA,tB)
}
plot3D::scatter3D(x[,1], x[,2],bob, phi=40, theta=80,pch=16)
set.seed(53302)
N = 20000
f2 = function(x,y){sin(x)*sin(y)*sqrt(x*y)} # http://clerc.maurice.free.fr/pso/Alpine/Alpine_Function.htm
x1 = runif(N, 0, 4); x2 = runif(N, 0, 4)
x = cbind(x1, x2)
true_mu = f2(x1, x2)
tau_true = 0.5
y = matrix( true_mu + rnorm(N, mean=0, sd=tau_true^(-0.5)) )
plot3D::scatter3D(x[,1], x[,2],y, phi=40, theta=80,pch=16)
########
TPs <- array(1,dim= c(nrow(x),2,2))
idxs   <- matrix(NA,nrow=nrow(x),2)
idxs[,1]    <- order(x[,1])
idxs[,2]    <- order(x[,2])
lsMat <- matrix(1,nrow=2,ncol=2)
TPscale <- matrix(sort(rnorm(2)),2)
cur_tau = 0.5
#####################################
# Gibbs Sampler for Single FIFA-GP TP
#
library(schnellerGP)
bob = y*0
for (ii in 1:25){
##############################
# Sample from the additive TP
for (jj in 1:(dim(TPs)[3])){
ids = 1:(dim(TPs)[3])
ids = ids[-jj]
rY = matrix(y)
for (kk in ids){
rY = rY - as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
TPs[,1,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,2,jj],x[,1],cur_tau,
lsMat[jj,1],idxs[,1],"matern")
TPs[,2,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,1,jj],x[,2],cur_tau,
lsMat[jj,2],idxs[,2],"matern")
lsMat[jj,1] = HODLR_TP_sample_ls(lsMat[jj,1],rY,TPscale[jj]*TPs[,2,jj],x[,1],
cur_tau,c(0.1,10),idxs[,1],kernel="matern")
lsMat[jj,2] = HODLR_TP_sample_ls(lsMat[jj,2],rY,TPscale[jj]*TPs[,1,jj],x[,2],
cur_tau,c(0.1,10),idxs[,2],kernel="matern")
TPscale[jj] = HODLR_TP_sample_scale(rY,TPs[,,jj],cur_tau)
}
m_mean = rY*0
for (kk in 1:(dim(TPs)[3])){
m_mean = m_mean + as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
bob = m_mean + bob/25
#sample precision assuming Ga(0.5,0.5) prior
tB = (y-m_mean); tB = 0.5*sum(tB*tB) + 0.5
tA = length(y)/2 + 0.5
cur_tau = rgamma(1,tA,tB)
}
plot3D::scatter3D(x[,1], x[,2],bob, phi=40, theta=80,pch=16)
bob = y*0
for (ii in 1:25){
##############################
# Sample from the additive TP
for (jj in 1:(dim(TPs)[3])){
ids = 1:(dim(TPs)[3])
ids = ids[-jj]
rY = matrix(y)
for (kk in ids){
rY = rY - as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
TPs[,1,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,2,jj],x[,1],cur_tau,
lsMat[jj,1],idxs[,1],"matern")
TPs[,2,jj] = HODLR_TP_sample(rY,TPscale[jj]*TPs[,1,jj],x[,2],cur_tau,
lsMat[jj,2],idxs[,2],"matern")
lsMat[jj,1] = HODLR_TP_sample_ls(lsMat[jj,1],rY,TPscale[jj]*TPs[,2,jj],x[,1],
cur_tau,c(0.1,10),idxs[,1],kernel="matern")
lsMat[jj,2] = HODLR_TP_sample_ls(lsMat[jj,2],rY,TPscale[jj]*TPs[,1,jj],x[,2],
cur_tau,c(0.1,10),idxs[,2],kernel="matern")
TPscale[jj] = HODLR_TP_sample_scale(rY,TPs[,,jj],cur_tau)
}
m_mean = rY*0
for (kk in 1:(dim(TPs)[3])){
m_mean = m_mean + as.matrix(TPscale[kk]*apply(TPs[,,kk],1,prod))
}
bob = m_mean + bob/25
#sample precision assuming Ga(0.5,0.5) prior
tB = (y-m_mean); tB = 0.5*sum(tB*tB) + 0.5
tA = length(y)/2 + 0.5
cur_tau = rgamma(1,tA,tB)
}
plot3D::scatter3D(x[,1], x[,2],bob, phi=40, theta=80,pch=16)
library(ToxicR)
library(tidyverse)
PFOA_Liver1 <- read_table2("~/OneDrive - National Institutes of Health/Projects/2021/Bayesian/Analyes/data/PFOA_Liver_S1500+_S1-5.txt",
col_names = TRUE)
ii = 9
rep1_1 <- as.matrix(as.numeric(PFOA_Liver1[ii,-1]))
doses<- as.matrix(c(0,0,0,0,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.625,0.625,0.625,1.25,1.25,1.25,2.5,2.5,2.5,5,5,
5,5,10,10,10,10,20,20,20,20))
doses2 <-as.matrix( c(0,0,0,0,0.156,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.3125,0.625,0.625,0.625,0.625,1.25,1.25,1.25,1.25,2.5,
2.5,2.5,2.5,5,5,5,5,10,10,10,10,20,20,20,20))
prior <- create_prior_list(normprior(0,1,-100,100),
normprior(0,1,-100,100),
normprior(0,1,0,100),
lnormprior(log(2.5),0.38215,0,100),
normprior(0,1,-100,100));
hill_prior  <- create_continuous_prior(prior,"hill","normal")
fit_hill_x <- single_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),model_type="hill",
distribution="normal",fit_type="mcmc",BMR=2,prior=hill_prior,samples=75000)
library(tidyverse)
PFOA_Liver1 <- read_table2("~/OneDrive - National Institutes of Health/Projects/2021/Bayesian/Analyes/data/PFOA_Liver_S1500+_S1-5.txt",
col_names = TRUE)
ii = 9
rep1_1 <- as.matrix(as.numeric(PFOA_Liver1[ii,-1]))
doses<- as.matrix(c(0,0,0,0,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.625,0.625,0.625,1.25,1.25,1.25,2.5,2.5,2.5,5,5,
5,5,10,10,10,10,20,20,20,20))
doses2 <-as.matrix( c(0,0,0,0,0.156,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.3125,0.625,0.625,0.625,0.625,1.25,1.25,1.25,1.25,2.5,
2.5,2.5,2.5,5,5,5,5,10,10,10,10,20,20,20,20))
prior <- create_prior_list(normprior(0,1,-100,100),
normprior(0,1,-100,100),
normprior(0,1,0,100),
lnormprior(log(2.5),0.38215,0,100),
normprior(0,1,-100,100));
hill_prior  <- create_continuous_prior(prior,"hill","normal")
fit_hill_x <- single_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),model_type="hill",
distribution="normal",fit_type="mcmc",BMR=2,prior=hill_prior,samples=75000)
library(ToxicR)
PR = t_prior_result$prior
library(tidyverse)
PFOA_Liver1 <- read_table2("~/OneDrive - National Institutes of Health/Projects/2021/Bayesian/Analyes/data/PFOA_Liver_S1500+_S1-5.txt",
col_names = TRUE)
ii = 9
rep1_1 <- as.matrix(as.numeric(PFOA_Liver1[ii,-1]))
doses<- as.matrix(c(0,0,0,0,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.625,0.625,0.625,1.25,1.25,1.25,2.5,2.5,2.5,5,5,
5,5,10,10,10,10,20,20,20,20))
doses2 <-as.matrix( c(0,0,0,0,0.156,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.3125,0.625,0.625,0.625,0.625,1.25,1.25,1.25,1.25,2.5,
2.5,2.5,2.5,5,5,5,5,10,10,10,10,20,20,20,20))
prior <- create_prior_list(normprior(0,1,-100,100),
normprior(0,1,-100,100),
normprior(0,1,0,100),
lnormprior(log(2.5),0.38215,0,100),
normprior(0,1,-100,100));
hill_prior  <- create_continuous_prior(prior,"hill","normal")
fit_hill_x <- single_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),model_type="hill",
distribution="normal",fit_type="mcmc",BMR=2,prior=hill_prior,samples=75000)
plot(fit_hill_x)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
distribution="normal",fit_type="mcmc",BMR=2,samples=75000)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=75000)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="laplace",BMR=2,samples=75000)
cleveland_plot(fit_hill_x)
library(ToxicR)
library(tidyverse)
PFOA_Liver1 <- read_table2("~/OneDrive - National Institutes of Health/Projects/2021/Bayesian/Analyes/data/PFOA_Liver_S1500+_S1-5.txt",
col_names = TRUE)
ii = 9
rep1_1 <- as.matrix(as.numeric(PFOA_Liver1[ii,-1]))
doses<- as.matrix(c(0,0,0,0,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.625,0.625,0.625,1.25,1.25,1.25,2.5,2.5,2.5,5,5,
5,5,10,10,10,10,20,20,20,20))
doses2 <-as.matrix( c(0,0,0,0,0.156,0.156,0.156,0.156,0.3125,0.3125,0.3125,
0.3125,0.625,0.625,0.625,0.625,1.25,1.25,1.25,1.25,2.5,
2.5,2.5,2.5,5,5,5,5,10,10,10,10,20,20,20,20))
prior <- create_prior_list(normprior(0,1,-100,100),
normprior(0,1,-100,100),
normprior(0,1,0,100),
lnormprior(log(2.5),0.38215,0,100),
normprior(0,1,-100,100));
hill_prior  <- create_continuous_prior(prior,"hill","normal")
fit_hill_x <- single_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),model_type="hill",
distribution="normal",fit_type="mcmc",BMR=2,prior=hill_prior,samples=75000)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="laplace",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="laplace",BMR=2,samples=25000)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
plot(fit_hill_x)
fit_hill_x
head(fit_hill_x)
names(fit_hill_x)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
library(ToxicR)
fit_hill_x <- ma_continuous_fit(as.matrix(doses),as.matrix(as.numeric(rep1_1)),
fit_type="mcmc",BMR=2,samples=25000)
plot(fit_hill_x)
MAdensity_plotfit_hill_x
MAdensity_plot(fit_hill_x)
MAdensity_plot(fit_hill_x) + xlab("suck my dick")
library(ggplot2)
MAdensity_plot(fit_hill_x) + xlab("suck my dick")
MAdensity_plot(fit_hill_x) + xlab("BMD Distribution")
mData <- matrix(c(0,    0,100,
50,   5,100,
100, 30,100,
150, 65,100,
200, 90,100),nrow=5,ncol=3,byrow=T)
S = single_dichotomous_fit(mData[,1],mData[,2],mData[,3],model_type = "weibull",degree = 3, fit_type = "laplace")
plot(S)
Q  = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type = "mcmc",samples=500,burnin=2)
Q  = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type = "mcmc",samples=50000,burnin=2)
plot(Q)
MAdensity_plot(Q)
mData <- matrix(c(0, 5, 50,
475.1, 27,47,
992.4,40,	47),nrow=3,ncol=3,byrow=T)
Q  = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type = "mcmc",samples=50000,burnin=2)
plot(Q)
MAdensity_plot(Q)
Q  = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3], fit_type = "laplace",samples=50000,burnin=2)
plot(Q)
MAdensity_plot(Q)
cleveland_plot(Q)
hill_prior
prior <- create_prior_list(normprior(0,1,-100,100),
normprior(0,1,-100,100),
normprior(0,1,0,100),
lnormprior(log(2.5),0.38215,0,100),
lnormprior(log(2.5),0.38215,0,100),
normprior(0,1,-100,100));
hill_prior  <- create_continuous_prior(prior,"hill","normal-ncv")
hill_prior
setwd("~/Documents")
setwd("~/Documents/r_software")
setwd("~/Documents/r_software/RBMDS/ToxicR")
library(ToxicR)
library(dplyr)
library(tidyverse)
library(ToxicR)
pkgbuild::check_build_tools(debug = TRUE)
install.packages("devtools")
install.packages("testthat")
library(ToxicR)
library(ToxciR)
library(ToxciR)
library(ToxicR)
?install.packages
install.packages("RcppGSL",type="source")
install.packages("ggpubr")
install.packages("bibtex")
install.packages("testthat")
install.packages("actuar")
library(ToxicR)
doses <- c(0,0,0,0,8,8,8,8,16,16,16,16,31.25,31.25,31.25,31.25,62.5,62.5,62.5,62.5,125,125,125,125,250,250,250,250,500,500,500,500,1000,1000,1000,1000);
v1 <- c(4.881987663,4.883269599,4.899303975,5.119740361,5.347394899,5.056169068,4.928591929,4.64581676,5.177733827,5.276270042,5.303172215,5.152691118,5.418876308,5.264282441,5.43181621,5.561028456,5.355327532,5.607800005,5.444519494,5.672198171,5.41472548,5.797997863,5.931625853,5.578030536,5.902850667,5.960838843,5.333798113,5.345880118,5.613417178,6.122145972,5.457300079,5.583780586,6.38581937,5.899680475,6.12926489,5.776545018);
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="mcmc",BMR = 3)
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="mcmc",BMR = 3)
plot(bob)
plot(bob)
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="mcmc",BMR = 2)
plot(bob)
tom <- single_continuous_fit(as.matrix(doses),as.matrix(v1),model_type = "hill")
system.time({tom <- single_continuous_fit(as.matrix(doses),as.matrix(v1),model_type = "hill")})
plot(tom)
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="mcmc",BMR = 2)
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="laplace",BMR = 2)
plot(bob)
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="laplace",BMR = 3)
plot(bob)
install.packages("devtools")
