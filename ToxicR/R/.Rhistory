var_no <- var_ig
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
if (isM(0) < isM(100)){
sdDif = sqrt(var_no[i])
}else{
sdDif = sqrt(var_no[i])
}
bb  <-  function(d){abs(isM(d)-isM(0))-sdDif}
bmd_sd_no[i] <- uniroot(bb,c(0,100))$root
}
var_ln <- c(0.2085732,0.2085732,0.1582215,0.1582215)
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
var_m <- expm1(var_ln[i]^2)*exp(2*log(isM(0))+var_ln[i]^2)
bb  <-  function(d){abs(isM(d)-isM(0))-sqrt(var_m)}
bmd_sd_ln[i] <- uniroot(bb,c(0,100))$root
}
BMD_IS <- as.data.frame(t(rbind(bmd_sd_no,bmd_sd_ln,bmd_sd_ig)))
names(BMD_IS) <- c("Normal","Log-Normal","Inverse-Gaussian")
row.names(BMD_IS) <- c("I-Spline Simulation 1","I-Spline Simulation 2",
"I-Spline Simulation 3","I-Spline Simulation 4")
kable(BMD_IS,digits=2,caption ="I-Spline Simulation BMDs for standard deviation BMD across
the three different distributional conditions.")
doses <- seq(0,100,0.5)
bkg = c(10.58,10.58,481,481)
lambda <- c(18528.14,18528.14,18528.14,18528.14,227.8176,227.8176,227.8176,227.8176)
bmd_sd_ig <- c(0,0,0,0)
bmd_sd_no <- c(0,0,0,0)
bmd_sd_ln <- c(0,0,0,0)
i = 1
var_ig <- c(NA,NA,NA,NA)
for(i in 1:8){
mean = cont_hill_f(as.numeric(hill[i,]),doses)
isM <- splinefun(doses,mean)
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_ig[i] <- uniroot(bb,c(0,100))$root
}
var_no <- var_ig
for(i in 1:8){
mean =  cont_hill_f(as.numeric(hill[i,]),doses)
isM <- splinefun(doses,mean)
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_no[i] <- uniroot(bb,c(0,100))$root
}
var_ln <- c(0.1582215,0.1582215,0.1582215,0.1582215,0.2085732,0.2085732,0.2085732,0.2085732)
for(i in 1:8){
mean =  cont_hill_f(as.numeric(hill[i,]),doses)
isM <- splinefun(doses,mean)
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_ln[i] <- uniroot(bb,c(0,100))$root
}
BMD_IS <- as.data.frame(t(rbind(bmd_sd_no,bmd_sd_ln,bmd_sd_ig)))
names(BMD_IS) <- c("Normal","Log-Normal","Inverse-Gaussian")
row.names(BMD_IS) <- c("Hill Simulation 1","Hill Simulation 2",
"Hill Simulation 3","Hill Simulation 4",
"Hill Simulation 5","Hill Simulation 6",
"Hill Simulation 7","Hill Simulation 8")
kable(BMD_IS,digits=2,caption ="Hill Simulation BMDs for standard deviation BMD across
the three different distributional conditions.")
doses <- seq(0,100,0.5)
bkg = c(10.58,10.58,481,481)
lambda <- c(18528.14,18528.14,18528.14,18528.14,227.8176,227.8176,227.8176,227.8176)
bmd_sd_ig <- c(0,0,0,0)
bmd_sd_no <- c(0,0,0,0)
bmd_sd_ln <- c(0,0,0,0)
i = 1
var_ig <- c(NA,NA,NA,NA)
for(i in 1:8){
mean =  mean =  cont_exp_5_f(as.numeric(Exp5[i,]),doses)
isM <- splinefun(doses,mean)
var_ig[i] <- isM(0)^3/lambda[i]
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_ig[i] <- uniroot(bb,c(0,100))$root
}
var_no <- var_ig
for(i in 1:8){
mean =  cont_exp_5_f(as.numeric(Exp5[i,]),doses)
isM <- splinefun(doses,mean)
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_no[i] <- uniroot(bb,c(0,100))$root
}
var_ln <- c(0.1582215,0.1582215,0.1582215,0.1582215,0.2085732,0.2085732,0.2085732,0.2085732)
for(i in 1:8){
mean =  cont_exp_5_f(as.numeric(Exp5[i,]),doses)
isM <- splinefun(doses,mean)
var_m <- expm1(var_ln[i]^2)*exp(2*log(isM(0))+var_ln[i]^2)
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_ln[i] <- uniroot(bb,c(0,100))$root
}
BMD_IS <- as.data.frame(t(rbind(bmd_sd_no,bmd_sd_ln,bmd_sd_ig)))
names(BMD_IS) <- c("Normal","Log-Normal","Inverse-Gaussian")
row.names(BMD_IS) <- c("Exp-5 Simulation 1","Exp-5 Simulation 2",
"Exp-5 Simulation 3","Exp-5 Simulation 4",
"Exp-5 Simulation 5","Exp-5 Simulation 6",
"Exp-5 Simulation 7","Exp-5 Simulation 8")
kable(BMD_IS,digits=2,caption ="Exponential-5 Simulation BMDs for standard deviation BMD across
the three different distributional conditions.")
doses <- seq(0,100,0.5)
X <- iSpline(doses,knots=seq(30,90,20),intercept=TRUE)
bkg = c(10.58,10.58,481,481)
lambda <- c(227.8176,227.8176,18528.14,18528.14)
bmd_sd_ig <- c(0,0,0,0)
bmd_sd_no <- c(0,0,0,0)
bmd_sd_ln <- c(0,0,0,0)
i = 1
var_ig <- c(NA,NA,NA,NA)
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
var_ig[i] <- isM(0)^3/lambda[i]
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_ig[i] <- uniroot(bb,c(0,100))$root
}
var_no <- var_ig
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_no[i] <- uniroot(bb,c(0,100))$root
}
var_ln <- c(0.2085732,0.2085732,0.1582215,0.1582215)
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
bb  <-  function(d){abs(isM(d)-isM(0))/isM(0)-0.1}
bmd_sd_ln[i] <- uniroot(bb,c(0,100))$root
}
BMD_IS <- as.data.frame(t(rbind(bmd_sd_no,bmd_sd_ln,bmd_sd_ig)))
names(BMD_IS) <- c("Normal","Log-Normal","Inverse-Gaussian")
row.names(BMD_IS) <- c("I-Spline Simulation 1","I-Spline Simulation 2",
"I-Spline Simulation 3","I-Spline Simulation 4")
kable(BMD_IS,digits=2,caption ="I-Spline Simulation BMDs for standard deviation BMD across
the three different distributional conditions.")
doses <- seq(0,100,0.5)
X <- iSpline(doses,knots=seq(30,90,20),intercept=TRUE)
bkg = c(10.58,10.58,481,481)
lambda <- c(227.8176,227.8176,18528.14,18528.14)
bmd_sd_ig <- c(0,0,0,0)
bmd_sd_no <- c(0,0,0,0)
bmd_sd_ln <- c(0,0,0,0)
i = 1
var_ig <- c(NA,NA,NA,NA)
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
var_ig[i] <- isM(0)^3/lambda[i]
if (isM(0) < isM(100)){
temp <- qinvgauss(0.975,isM(0),lambda[i])
bb  <-  function(d){((1-pinvgauss(temp,isM(d),lambda[i])) -0.0275)/0.975-0.05}
}else{
temp <- qinvgauss(0.0275,isM(0),lambda[i])
bb  <-  function(d){((pinvgauss(temp,isM(d),lambda[i]))- 0.0275)/0.975-0.05}
}
bmd_sd_ig[i] <- uniroot(bb,c(0,100))$root
}
var_no <- var_ig
print(var_no)
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
if (isM(0) < isM(100)){
temp <- qnorm(0.975,isM(0),sqrt(var_no[i]))
bb  <-  function(d){((1-pnorm(temp,isM(d),sqrt(var_no[i]))) -0.0275)/0.975-0.05}
}else{
temp <- qnorm(0.0275,isM(0),sqrt(var_no[i]))
bb  <-  function(d){(pnorm(temp,isM(d),sqrt(var_no[i]))- 0.0275)/0.975-0.05}
}
bmd_sd_no[i] <- uniroot(bb,c(0,100))$root
}
var_ln <- c(0.209,0.209,0.158,0.158)
var_ln <- var_ln*var_ln
for(i in 1:4){
mean = X%*%t(iS[i,,drop=F]) + bkg[i]
isM <- splinefun(doses,mean)
if (isM(0) < isM(100)){
temp <- qlnorm(0.975,log(isM(0)),sqrt(var_ln[i]))
bb  <-  function(d){((1-plnorm(temp,log(isM(d)),sqrt(var_ln[i]))) -0.0275)/0.975-0.05}
}else{
temp <- qlnorm(0.0275,log(isM(0)),sqrt(var_ln[i]))
bb  <-  function(d){(plnorm(temp,log(isM(d)),sqrt(var_ln[i]))- 0.0275)/0.975-0.05}
}
if (bb(100) > 0){
bmd_sd_ln[i] <- uniroot(bb,c(0,100))$root
}else{
bmd_sd_ln[i] <- NA
}
}
BMD_IS <- as.data.frame(t(rbind(bmd_sd_no,bmd_sd_ln,bmd_sd_ig)))
names(BMD_IS) <- c("Normal","Log-Normal","Inverse-Gaussian")
row.names(BMD_IS) <- c("I-Spline Simulation 1","I-Spline Simulation 2",
"I-Spline Simulation 3","I-Spline Simulation 4")
kable(BMD_IS,digits=2,caption ="I-Spline Simulation BMDs for Hybrid BMD across
the three different distributional conditions.")
# I fixed some logic of inputs in if/else statement- they used to be fit$data
# SL : Should Plot's x axis be based on test_dose?
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)-min(doses))/500)
library(ToxicR)
library(ggplot2)
prior <- create_prior_list(normprior(0,1,-100,100),
normprior(0,10,-1e4,1e4),
lnormprior(0,1,0,100),
lnormprior(log(2),0.4215,0,18),
#lnormprior(0, 0.75,0,100),
normprior(0, 10,-100,100));
bob = create_continuous_prior(prior,"exp-5","lognormal")
v1 <- c(13.184152,12.8906975,12.359554,13.073001,12.861814,12.967434,12.88052,
13.249991,	12.992931,	13.022338,	13.614057,	13.287018,	13.449239,	13.950747,
13.239134,	13.82321,	15.080262,	14.85966,	14.7805395,	15.238369,	14.749196,
14.913585,	15.181719,	15.051697,	15.065641,	15.16396,	15.484345,	16.493923,
15.633442,	15.96033,	15.388061)
prior <- create_prior_list(lnormprior(0,1,-100,100),
normprior( 0, 1,-100,100),#normprior(1,2,-18,18),
lnormprior(0 ,1,0,100),
lnormprior(0,1,0,18),
normprior(0,2,-18,18));
library(readr)
PFOA_Liver <- read_table2("PFOA_Liver.txt",
col_names = FALSE)
doses	<- c(0,	0,	0,	0,	0.156,	0.156,	0.156,	0.3125,	0.3125,	0.3125,
0.625,	0.625,	0.625,	1.25,	1.25,	1.25,	2.5,	2.5,	2.5,	5,5,
5,	5,	10,	10,	10,	10,	20,	20,	20,	20)
B <- single_continuous_fit(as.matrix(doses),as.matrix(v1),model_type = "hill", fit_type = "laplace")
#BB <- single_continuous_fit(as.matrix(doses),as.matrix(v1),model_type = "hill", distribution="normal",fit_type = "mle",sstat = F,)
library(dplyr)
library(ggplot2)
library(ToxicR)
temp <- PFOA_Liver %>% filter(X1 == "ABCG2_32656")
v1 <- as.numeric(temp[2:length(temp)])
kk <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "laplace",BMR =1.5,model_list = model_list,samples = 35000 )
library(readr)
PFOA_Liver <- read_table2("~/Documents/PFOA_Liver.txt",
col_names = FALSE)
doses	<- c(0,	0,	0,	0,	0.156,	0.156,	0.156,	0.3125,	0.3125,	0.3125,
0.625,	0.625,	0.625,	1.25,	1.25,	1.25,	2.5,	2.5,	2.5,	5,5,
5,	5,	10,	10,	10,	10,	20,	20,	20,	20)
B <- single_continuous_fit(as.matrix(doses),as.matrix(v1),model_type = "hill", fit_type = "laplace")
library(dplyr)
library(ggplot2)
library(ToxicR)
temp <- PFOA_Liver %>% filter(X1 == "ABCG2_32656")
v1 <- as.numeric(temp[2:length(temp)])
kk <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "laplace",BMR =1.5,model_list = model_list,samples = 35000 )
plot(kk)+scale_x_continuous(trans="pseudo_log")
library(dplyr)
library(ggplot2)
library(ToxicR)
temp <- PFOA_Liver %>% filter(X1 == "ABCG2_32656")
v1 <- as.numeric(temp[2:length(temp)])
kk <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "laplace",BMR =1.5,model_list = model_list,samples = 35000 )
plot(kk)+scale_x_continuous(trans="pseudo_log")
library(dplyr)
library(ggplot2)
library(ToxicR)
temp <- PFOA_Liver %>% filter(X1 == "ABCG2_32656")
v1 <- as.numeric(temp[2:length(temp)])
kk <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type = "laplace",BMR =1.5,model_list = model_list,samples = 35000 )
plot(kk)+scale_x_continuous(trans="pseudo_log")
# Study design drawn from
# https://www.fda.gov/regulatory-information/search-fda-guidance-documents/redbook-2000-ivc3a-short-term-toxicity-studies-rodents#exp
# Means and variances drawn from
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3620211/
# Body Weight
library(knitr)
library(dplyr)
library(ToxicR)
library(actuar)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
Hill.p <- rbind(c(481,-250.3,70,3.3),
c(481,-250.3,40,1.3),
c(481,-250.2,15,1.1),
c(481,-250.3,50,4) ,
c(10.58,9.7,70,3.5),
c(10.58,9.7,25,3),
c(10.58,9.7,15,2),
c(10.58,9.7,50,4))
hill <- data.frame(a=Hill.p[,1],b=Hill.p[,2],
c=Hill.p[,3],d=Hill.p[,4])
row.names(hill) <- c("Hill Simulation 1","Hill Simulation 2",
"Hill Simulation 3","Hill Simulation 4",
"Hill Simulation 5","Hill Simulation 6",
"Hill Simulation 7","Hill Simulation 8")
#estimates of the Log-normal variance
f1 = function(x){log(exp(x)*expm1(x))-(log(77.5^2) -2*log(481))}
sqrt(uniroot(f1,c(0,1))$root)
f2 = function(x){log(exp(x)*expm1(x))-(log(2.28^2) -2*log(10.58))}
sqrt(uniroot(f2,c(0,1))$root)
model_list  = data.frame(model_list = c(rep("hill",3),rep("exp-3",3),rep("exp-5",3),rep("power",2)),
distribution_list =  c(rep(c("normal","normal-ncv","lognormal"),3),"normal",
"normal-ncv"))
model_list2 = data.frame(model_list = c(rep("hill",1),rep("exp-3",1),rep("exp-5",1),rep("power",1)),
distribution_list =  c(rep(c("normal"),4)))
doses <- rep(c(0,6.25,12.5,25,50,100),each=10)
dosesq <- rep(c(0,6.25,12.5,25,50,100),each=30)
mean <- cont_hill_f(as.numeric(hill[2,]),doses)
y <- rinvgauss(length(mean),mean,18528.14)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
AA$bmd
plot(AA)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
AA$bmd
#plot(AA)
mean <- cont_hill_f(as.numeric(hill[6,]),doses)
y <- rinvgauss(length(mean),mean,227.8176)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
#log-transformed for fitting as in ToxicR use
Exp5.p <- rbind(c(481,0.05,log(1/1.42870),2),
c(481,0.02,log(1/1.42870),2),
c(481,0.01,log(1/1.42870),2),
c(481,0.1,log(1/1.42870),2) ,
c(10.58,0.05,log(1.5),1.5),
c(10.58,0.02,log(1.5),1.5),
c(10.58,0.01,log(1.5),1.5),
c(10.58,0.1,log(1.5),1.5))
Exp5 <- data.frame(a=Exp5.p[,1],b=Exp5.p[,2],
c=Exp5.p[,3],d=Exp5.p[,4])
row.names(Exp5) <- c("Exp-5 Simulation 1","Exp-5 Simulation 2",
"Exp-5 Simulation 3","Exp-5 Simulation 4",
"Exp-5 Simulation 5","Exp-5 Simulation 6",
"Exp-5 Simulation 7","Exp-5 Simulation 8")
doses <- rep(c(0,20,40,60,80,100),each=10)
dosesq <- rep(c(0,20,40,60,80,100),each=30)
mean <- cont_exp_5_f(as.numeric(Exp5[1,]),doses)
y <- rinvgauss(length(mean),mean,18528.14)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
mean <- cont_exp_5_f(as.numeric(Exp5[7,]),doses)
y <- rinvgauss(length(mean),mean, 227.8176)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
AA$bmd
plot(AA)
AA$Individual_Model_1$bmd_dist
AA$posterior_probs
AA$Individual_Model_2$bmd_dist
AA$ma_bmd
AA$bmd
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
library(ToxicR)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
AA$bmd
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
library(ToxicR)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
AA$bmd
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
library(ToxicR)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
AA$bmd
plot(AA)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
library(ToxicR)
plot(AA)
library(ToxicR)
plot(AA)
library(ToxicR)
plot(AA)
library(ToxicR)
plot(AA)
library(ToxicR)
plot(AA)
plot(BB)
library(ToxicR)
plot(BB)
library(dplyr)
plot(BB)
plot(BB)+scale_x_continuous(trans="pseudo_log")
library(ggplot2)
plot(BB)+scale_x_continuous(trans="pseudo_log")
MAdensity_plot(BB)
A = plot(BB)
install.packages("plotly")
library(plotly)\
library(plotly)
plotly(A)
ggplotly(A)
# Study design drawn from
# https://www.fda.gov/regulatory-information/search-fda-guidance-documents/redbook-2000-ivc3a-short-term-toxicity-studies-rodents#exp
# Means and variances drawn from
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3620211/
# Body Weight
library(knitr)
library(dplyr)
library(ToxicR)
library(actuar)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
Hill.p <- rbind(c(481,-250.3,70,3.3),
c(481,-250.3,40,1.3),
c(481,-250.2,15,1.1),
c(481,-250.3,50,4) ,
c(10.58,9.7,70,3.5),
c(10.58,9.7,25,3),
c(10.58,9.7,15,2),
c(10.58,9.7,50,4))
hill <- data.frame(a=Hill.p[,1],b=Hill.p[,2],
c=Hill.p[,3],d=Hill.p[,4])
row.names(hill) <- c("Hill Simulation 1","Hill Simulation 2",
"Hill Simulation 3","Hill Simulation 4",
"Hill Simulation 5","Hill Simulation 6",
"Hill Simulation 7","Hill Simulation 8")
#estimates of the Log-normal variance
f1 = function(x){log(exp(x)*expm1(x))-(log(77.5^2) -2*log(481))}
sqrt(uniroot(f1,c(0,1))$root)
f2 = function(x){log(exp(x)*expm1(x))-(log(2.28^2) -2*log(10.58))}
sqrt(uniroot(f2,c(0,1))$root)
#log-transformed for fitting as in ToxicR use
Exp5.p <- rbind(c(481,0.05,log(1/1.42870),2),
c(481,0.02,log(1/1.42870),2),
c(481,0.01,log(1/1.42870),2),
c(481,0.1,log(1/1.42870),2) ,
c(10.58,0.05,log(1.5),1.5),
c(10.58,0.02,log(1.5),1.5),
c(10.58,0.01,log(1.5),1.5),
c(10.58,0.1,log(1.5),1.5))
Exp5 <- data.frame(a=Exp5.p[,1],b=Exp5.p[,2],
c=Exp5.p[,3],d=Exp5.p[,4])
row.names(Exp5) <- c("Exp-5 Simulation 1","Exp-5 Simulation 2",
"Exp-5 Simulation 3","Exp-5 Simulation 4",
"Exp-5 Simulation 5","Exp-5 Simulation 6",
"Exp-5 Simulation 7","Exp-5 Simulation 8")
doses <- rep(c(0,20,40,60,80,100),each=10)
dosesq <- rep(c(0,20,40,60,80,100),each=30)
mean <- cont_exp_5_f(as.numeric(Exp5[1,]),doses)
y <- rinvgauss(length(mean),mean,18528.14)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
mean <- cont_exp_5_f(as.numeric(Exp5[7,]),doses)
y <- rinvgauss(length(mean),mean, 227.8176)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
mean <- cont_exp_5_f(as.numeric(Exp5[2,]),doses)
y <- rnorm(length(mean),mean,77.5)
mydoses <- seq(0,100,1)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
Pl1 = plot(AA) + geom_line(aes(x=mydoses,y=cont_exp_5_f(unlist(Exp5[2,]),mydoses)),color="grey",linetype = "dashed",size=2) +
coord_cartesian(ylim=c(250,525),xlim=c(38,82)) + ggtitle("")
AA$bmd
Pl1
mean <- cont_exp_5_f(as.numeric(Exp5[2,]),dosesq)
y <- rnorm(length(mean),mean,77.5)
mydoses <- seq(0,100,1)
AA <- ma_continuous_fit(as.matrix(dosesq),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
Pl2 = plot(AA) + geom_line(aes(x=mydoses,y=cont_exp_5_f(unlist(Exp5[2,]),mydoses)),color="grey",linetype = "dashed",size=2) +
coord_cartesian(ylim=c(250,525),xlim=c(38,82))+ggtitle("")
AA$bmd
require(gridExtra)
grid.arrange(Pl1+ylab(""),Pl2+ylab(""),ncol=2)
#log-transformed for fitting as in ToxicR use
beta1 <- c(0.15486274,0.14054532,0.05806702,0.67421470,0.18371405,0.92821744,1.60669594,1.04508522)
beta2 <- c(0.677816175,0.322787366,3.356424380,0.102841870,0.009085238,0.087907971,0.344255936,0.100000000)
#add 481 to get the background
beta3 <- c(-45.715480,-53.668821,-14.266726, -8.066441,-1.620326 ,-1.800000,-1.800000 ,-1.800000)
beta4 <- c(-11.9566632,-19.9908719,-39.3450020,-16.3895141,-2.8191037,-4.5801731,-0.834784,-0.7000000)
iSpline <- rbind(beta1,beta2,beta3,beta4)
iS <- data.frame(b1=iSpline[,1],b2=iSpline[,2],b3 = iSpline[,3],
b4=iSpline[,4],b5=iSpline[,5],b6 = iSpline[,6],
b7=iSpline[,7],b8=iSpline[,8])
row.names(iS) <- c("iSpline Simulation 1","iSpline Simulation 2",
"iSpline Simulation 3","iSpline Simulation 4")
kable(iS,digits=3)
doses <- rep(c(0,20,40,60,80,100),each=10)
dosesq <- rep(c(0,20,40,60,80,100),each=100)
library(splines2)
X <- iSpline(doses,knots=seq(30,90,20))
mydoses <- seq(0,100,1)
X3 <- iSpline(mydoses,knots=seq(30,90,20))
tmean <- X3%*%t(iS[2,,drop=F]) + 10.58
mean <- X%*%t(iS[2,,drop=F]) + 10.58
y <- rinvgauss(length(mean),mean,227.8176)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
AA$bmd
X2 <- iSpline(dosesq,knots=seq(30,90,20))
mean <- X2%*%t(iS[2,,drop=F]) + 10.58
y <- rinvgauss(length(mean),mean,227.8176)
BB <- ma_continuous_fit(as.matrix(dosesq),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025)
BB$bmd
plot(BB)+geom_line(aes(y=tmean,x=mydoses),color="grey",linetype="dotted",size=2)
plot(AA)
doses <- rep(c(0,6.25,12.5,25,50,100),each=10)
library(splines2)
X <- iSpline(doses,knots=seq(30,90,20))
mean <- X%*%t(iS[3,,drop=F]) + 481
y <- rinvgauss(length(mean),mean, 18528.14)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
