#   lines( c(bmd[1],bmd[1]),c(0,temp_fit(bmd[1])))
#   lines( c(bmd[2],bmd[2]),c(0,temp_fit(bmd[2])))
#   lines( c(bmd[3],bmd[3]),c(0,temp_fit(bmd[3])))
# }
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
temp = temp[temp < 30*max(doses)]
Dens =  density(temp,cut=c(quantile(temp_bmd,0.995,na.rm = TRUE)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses*30))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
# polygon(c(0,D1_x,max(doses)),c(qm,qm+D1_y,qm),col = alphablend(col=density_col,0.2),border =alphablend(col=density_col,0.2))
out5 <- out4 + geom_polygon(aes(x=c(0,D1_x,max(doses)),y=c(qm,qm+D1_y,qm)), fill = "lightblue1", alpha=0.5)
#plot the individual models proportional to their weight
temp_f <- rep(0,length(test_doses))
temp_house<-matrix(nrow=length(fit_idx),ncol=length(temp_f))
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="hill"){
temp_f <- .dich_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="gamma"){
temp_f <- .dich_gamma_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model == "logistic"){
temp_f <- .dich_logist_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="log-logistic"){
temp_f <- .dich_llogist_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="probit"){
temp_f <- .dich_probit_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="log-probit"){
temp_f<- .dich_lprobit_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="multistage"){
temp_f <- .dich_multistage_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="qlinear"){
temp_f<- .dich_qlinear_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="weibull"){
temp_f<- .dich_weibull_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# lines(test_doses,temp_f,col=col,lwd = 2)
# Question - ggplot object save at where?
temp_house[ii,]<-temp_f
}
out6<-out5+geom_line(aes(x=test_doses,y=temp_house[1,]),col="coral3",alpha=A$posterior_probs[1])
out7<-out6+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out8<-out7+geom_line(aes(x=test_doses,y=temp_house[3,]),col="coral3", alpha=A$posterior_probs[3])
out9<-out8+geom_line(aes(x=test_doses,y=temp_house[4,]),col="coral3", alpha=A$posterior_probs[4])
out10<-out9+geom_line(aes(x=test_doses,y=temp_house[5,]),col="coral3", alpha=A$posterior_probs[5])
out11<-out10+geom_line(aes(x=test_doses,y=temp_house[6,]),col="coral3", alpha=A$posterior_probs[6])
out12<-out11+geom_line(aes(x=test_doses,y=temp_house[7,]),col="coral3", alpha=A$posterior_probs[7])
out13<-out12+geom_line(aes(x=test_doses,y=temp_house[8,]),col="coral3", alpha=A$posterior_probs[8])
out14<-out13+geom_line(aes(x=test_doses,y=temp_house[9,]),col="coral3", alpha=A$posterior_probs[9])
out14
out15<-out14+geom_point(aes(x=doses,y=probs))
return(out15)
}
}
# Case 1: Dichotomous - MCMC Fitting
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "mcmc")
# Test 2. Dichotomous MA Density Plot - Update for base-color later
.plot.density.BMDdichotomous_MA_MCMC(A)
#Base plot is updated
.plot.BMDdichotomous_MA(A)
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
A
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
A
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
A
A$Fitted_Model_2
A$Fitted_Model_3
# Case 2: Dichotomous - laplace
A = ma_dichotomous_fit(mData[,1],mData[,2],mData[,3],fit_type = "laplace")
# Test 1. Dichotomous MA Clevland Plot
.cleveland_plot.BMDdichotomous_MA(A)
A$Fitted_Model_9
A$Fitted_Model_1$full_model
A$Fitted_Model_1
A$posterior_probs
View(A)
A[data]
A[[1]]
A[[1]
]
A[[2]]
A[[2]]
A[[1]]
A[[2]]
A[[3]]
A[[4]]
A$posterior_probs
nrow(A$posterior_probs)
ncol(A$posterior_probs)
nums(A$posterior_probs)
ncol(c(A$posterior_probs))
A$posterior_probs
A$posterior_probs
A$BMD_CDF
A[[1]]
A[[9]]
nrow(A)
View(A)
nrow(A)
nrow(A$posterior_probs
)
cols(A$posterior_probs)
ncols(A$posterior_probs)
length(A$posterior_probs)
num_model<-length(A$posterior_probs)
data_d   <-  A[[1]]]$data
A[[1]]$data
data_d   <-  A[[1]]$data
data_d
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
fit_idx
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
fit_idx
fit_idx
class_list
fit_idx <- grep("Fitted_Model_",class_list)
fit_idx
fit_idx <- grep("Fitted_Model_",class_list)
num_model<-length(A$posterior_probs)
data_d   <-  A[[1]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/500);
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
ma_samps
temp_f   <- matrix(0,n_samps,length(test_doses))
print(dim(temp_f))
temp_bmd <- rep(0,length(test_doses))
probs <- (0.5+data_d[,2,drop=T])/(1.0 + data_d[,3,drop=T])
se <- sqrt(probs*(1-probs)/data_d[,3,drop=T])
doses = data_d[,1,drop=T]
uerror <- apply(cbind(probs*0+1,probs+se),1,min)
lerror <- apply(cbind(probs*0,probs-se),1,max)
dose = c(doses,doses)
Response = c(uerror,lerror)
#plot(dose,Response,type='n',main=fit$full_model...)
out<-ggplot()+
geom_errorbar(aes(x=doses, ymin=lerror, ymax=uerror),color="grey")+xlim(c(min(dose)-0.5,max(dose)+0.5))+ylim(c(-0.1,1))+labs(x="Dose", y="Proportion",title="Model : Dichotomous MA")+theme_minimal()
out
print(length(fit_idx))
out2<-out+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
out2
# Baseplot with minimal and maixmal dose with error bar
out<-ggplot()+
geom_errorbar(aes(x=doses, ymin=lerror, ymax=uerror),color="grey")+xlim(c(min(dose)-0.5,max(dose)+0.5))+ylim(c(-0.1,1))+labs(x="Dose", y="Proportion",title="Model : Dichotomous MA \n Fit type : Laplace")+theme_minimal()
out
# Baseplot with minimal and maixmal dose with error bar
out<-ggplot()+
geom_errorbar(aes(x=doses, ymin=lerror, ymax=uerror),color="grey")+xlim(c(min(dose)-0.5,max(dose)+0.5))+ylim(c(-0.1,1))+labs(x="Dose", y="Proportion",title="Model : Dichotomous MA \nFit type : Laplace")+theme_minimal()
out
# Baseplot with minimal and maixmal dose with error bar
out<-ggplot()+
geom_errorbar(aes(x=doses, ymin=lerror, ymax=uerror),color="grey")+xlim(c(min(dose)-0.5,max(dose)+0.5))+ylim(c(-0.1,1))+labs(x="Dose", y="Proportion",title="Model : Dichotomous MA, Fit type : Laplace")+theme_minimal()
out
fit_idx
fit
out2<-out+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
fitout2
out2
num_model
i=1
fit <- A[[fit_idx[ma_samps[ii]]]]
fit
fit$parameters
fit$parameters[1,]
fit$parameters
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_f
ma_samps <- sample(fit_idx,num_model, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,num_model,length(test_doses))
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_f
temp_f   <- matrix(0,num_model,length(test_doses))
View(temp_f
)
temp_f   <- matrix(0,num_model,length(test_doses))
fit <- A[[fit_idx[ma_samps[ii]]]]
fit
if (fit$model=="hill"){
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_f[1,]
.dich_hill_f
temp_f[ii,] <- .dich_hill_f(params=fit$parameters,d=test_doses)
fit$parameters
c(fit$parameters)
cols(fit$parameters)
fit$parameters[1]
fit$parameters[2]
t(fit$parameters)
temp_f[ii,] <- .dich_hill_f(params=t(fit$parameters),d=test_doses)
View(.dich_hill_f)
.dich_hill_f(params=fit$parameters),d=test_doses)
.dich_hill_f(params=fit$parameters,d=test_doses)
.dich_hill_f(params=fit$parameters,d=test_doses)
.dich_hill_f(fit$parameters,test_doses)
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_f
temp_f[1,]
.dich_hill_f(fit$parameters,test_doses)
temp_f
ma_samples
fit <- A[[num_model]]
fit
A[[2]]
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_f
View(temp_f)
# Create 0 matrix
temp_f   <- matrix(0,num_model,length(test_doses))
View(temp_f)
ii
ii<-1
ii<-1
fit <- A[[num_model]]
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_f
View(temp_f)
.dich_hill_f(fit$parameters,test_doses)
.dich_hill_f(fit$parameters,test_doses)
.dich_hill_f(fit$parameters,test_doses)
fit <- A[[num_model]]
fit <- A[[ii]]
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
temp_f
View(temp_f)
num_model
# Line plot for based on each cases
for (ii in 1:num_model){
fit <- A[[ii]]
if (fit$model=="hill"){
temp_f[ii,] <- .dich_hill_f(fit$parameters,test_doses)
}
if (fit$model=="gamma"){
temp_f[ii,] <- .dich_gamma_f(fit$parameters,test_doses)
}
if (fit$model == "logistic"){
temp_f[ii,] <- .dich_logist_f(fit$parameters,test_doses)
}
if (fit$model=="log-logistic"){
temp_f[ii,] <- .dich_llogist_f(fit$parameters,test_doses)
}
if (fit$model=="probit"){
temp_f[ii,] <- .dich_probit_f(fit$parameters,test_doses)
}
if (fit$model=="log-probit"){
temp_f[ii,] <- .dich_lprobit_f(fit$parameters,test_doses)
}
if (fit$model=="multistage"){
temp_f[ii,] <- .dich_multistage_f(fit$parameters,test_doses)
}
if (fit$model=="qlinear"){
temp_f[ii,] <-  .dich_qlinear_f(fit$parameters,test_doses)
}
if (fit$model=="weibull"){
temp_f[ii,] <- .dich_weibull_f(fit$parameters,test_doses)
}
}
View(temp_f)
me <- colMeans(temp_f)
me
lq <- apply(temp_f,2,quantile, probs = qprob)
uq <- apply(temp_f,2,quantile, probs = 1-qprob)
col1 = alphablend(credint_col,1)
temp_fit<-splinefun(test_doses,me)
temp_f
temp_fit
out2<-out+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
out2
temp_2
temp_2
temp_f
col1 = alphablend(credint_col,1)
out3<-out2+geom_smooth(aes(x=test_doses,y=me),col="blue")+geom_point(aes(x=doses,y=probs))
out3
out2<-out+
out3<-out2+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)+
geom_smooth(aes(x=test_doses,y=me),col="blue")+
geom_point(aes(x=doses,y=probs))
out2<-out+geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)+
geom_smooth(aes(x=test_doses,y=me),col="blue")+
geom_point(aes(x=doses,y=probs))
out2
out4<-out3+geom_segment(aes(x=fit$bmd, y=temp_fit(x=fit$bmd), xend=fit$bmd, yend=0), color="Red")
out4
A$BMD_CDF
# Laplace output doesn't have ..
A$BMD_CDF
# Laplace output doesn't have ..
which (min(A$BMD_CDF-0.5))
# Laplace output doesn't have ..
A$BMD_CDF-0.5
# Laplace output doesn't have ..
A$BMD_CDF[,2]-0.5
# Laplace output doesn't have ..
which(abs(A$BMD_CDF[,2]-0.5))
# Laplace output doesn't have ..
abs(A$BMD_CDF[,2]-0.5)
# Laplace output doesn't have ..
which(min(abs(A$BMD_CDF[,2]-0.5))
out4<-out3+geom_segment(aes(x=A$$bmd, y=temp_fit(x=fit$bmd), xend=fit$bmd, yend=0), color="Red")
temp_fit <- splinefun(test_doses,me)
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
temp = temp_bmd[!is.nan(temp_bmd)]
temp = temp[!is.infinite(temp)]
temp = temp[temp < 30*max(doses)]
Dens =  density(temp,cut=c(quantile(temp_bmd,0.995,na.rm = TRUE)))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.4
temp = which(Dens$x < max(test_doses*30))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
}
}
}
# Laplace output doesn't have ..
which(min(abs(A$BMD_CDF[,2]-0.5)))
# Laplace output doesn't have ..
min(abs(A$BMD_CDF[,2]-0.5))
# Laplace output doesn't have ..
which(A$BMD_CDF[,2])==min(abs(A$BMD_CDF[,2]-0.5))
# Laplace output doesn't have ..
which(A$BMD_CDF[,2]==min(abs(A$BMD_CDF[,2]-0.5)))
A$BMD_CDF[,2]==min(abs(A$BMD_CDF[,2]-0.5))
A$BMD_CDF[,2]=
abs(A$BMD_CDF[,2]-0.5)==min(abs(A$BMD_CDF[,2]-0.5))
# Laplace output doesn't have ..
which(abs(A$BMD_CDF[,2]-0.5)==min(abs(A$BMD_CDF[,2]-0.5)))
A$BMD_CDF
# Laplace output doesn't have ..
five_pct<-which(abs(A$BMD_CDF[,2]-0.05)==min(abs(A$BMD_CDF[,2]-0.05)))
fifty_pct<-which(abs(A$BMD_CDF[,2]-0.5)==min(abs(A$BMD_CDF[,2]-0.5)))
nfive_pct<-which(abs(A$BMD_CDF[,2]-0.95)==min(abs(A$BMD_CDF[,2]-0.95)))
A$BMD_CDF[,five_pct]
# Laplace output doesn't have ..
five_pct<-which(abs(A$BMD_CDF[,2]-0.05)==min(abs(A$BMD_CDF[,2]-0.05)))
fifty_pct<-which(abs(A$BMD_CDF[,2]-0.5)==min(abs(A$BMD_CDF[,2]-0.5)))
nfive_pct<-which(abs(A$BMD_CDF[,2]-0.95)==min(abs(A$BMD_CDF[,2]-0.95)))
A$BMD_CDF[five_pct,]
c(A$BMD_CDF[five_pct,],A$BMD_CDF[fifty_pct,],A$BMD_CDF[nfive_pct,])
c(A$BMD_CDF[five_pct,1],A$BMD_CDF[fifty_pct,1],A$BMD_CDF[nfive_pct,1])
BMDS<-c(A$BMD_CDF[five_pct,1],A$BMD_CDF[fifty_pct,1],A$BMD_CDF[nfive_pct,1])
out4<-out3+geom_segment(aes(x=BMDS, y=temp_fit(x=BMDS), xend=BMDS, yend=0), color="Red")
out4
temp_f
nrow(temp_f)
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])
out5
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out5
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])
out6<-out5geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out6<-out5+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out6
out4<-out3+geom_segment(aes(x=BMDS, y=temp_fit(x=BMDS), xend=BMDS, yend=0), color="Red")
out4
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])
A$posterior_probs
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])
out6<-out5+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out4<-out3+geom_segment(aes(x=BMDS, y=temp_fit(x=BMDS), xend=BMDS, yend=0), color="Red")
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])
out6<-out5+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out7<-out6+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out5<-out4+geom_line(aes(x=test_doses,y=temp_f[1,]),col="coral3",alpha=A$posterior_probs[1])
out6<-out5+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out7<-out6+geom_line(aes(x=test_doses,y=temp_house[2,]),col="coral3", alpha=A$posterior_probs[2])
out8<-out7+geom_line(aes(x=test_doses,y=temp_house[3,]),col="coral3", alpha=A$posterior_probs[3])
out9<-out8+geom_line(aes(x=test_doses,y=temp_house[4,]),col="coral3", alpha=A$posterior_probs[4])
out10<-out9+geom_line(aes(x=test_doses,y=temp_house[5,]),col="coral3", alpha=A$posterior_probs[5])
out11<-out10+geom_line(aes(x=test_doses,y=temp_house[6,]),col="coral3", alpha=A$posterior_probs[6])
out12<-out11+geom_line(aes(x=test_doses,y=temp_house[7,]),col="coral3", alpha=A$posterior_probs[7])
out13<-out12+geom_line(aes(x=test_doses,y=temp_house[8,]),col="coral3", alpha=A$posterior_probs[8])
out14<-out13+geom_line(aes(x=test_doses,y=temp_house[9,]),col="coral3", alpha=A$posterior_probs[9])
out14
out15<-out14+geom_point(aes(x=doses,y=probs))
out15
out14
out15<-out14+geom_point(aes(x=doses,y=probs))
otu14
out15
ou14
#Create MA simulation
#Simulation Creation for the CMA paper
#Hill.p copied from Simulation Conditions.Rmd (2/5/11)
library(ToxicR)
library(actuar)
set.seed(101711)
setwd('./Hill')
Hill.p <- rbind(c(481,-250.3,70,3.3),
c(481,-250.3,40,1.3),
c(481,-250.2,15,1.1),
c(481,-250.3,50,4) ,
c(10.58,9.7,70,3.5),
c(10.58,9.7,25,3),
c(10.58,9.7,15,2),
c(10.58,9.7,50,4))
dose_g_5 <- rep(c(0,6.25,12.5,25,50,100),each=10)
dose_e_5 <- rep(c(0,20,40,60,80,100),each=10)
dose_g_4 <- rep(c(0,12.5,25,50,100),each=10)
dose_e_4 <- rep(c(0,25,50,75,100),each=10)
sd    <- c(rep(77.5,4),rep(2.28,4))
#normal data
for (i in 1:8){
means_g_5 <- cont_hill_f(Hill.p[i,],dose_g_5)
means_e_5 <- cont_hill_f(Hill.p[i,],dose_e_5)
means_g_4 <- cont_hill_f(Hill.p[i,],dose_g_4)
means_e_4 <- cont_hill_f(Hill.p[i,],dose_e_4)
doses = dose_g_5
sim_data <- matrix(rnorm(1000*length(dose_g_5),means_g_5,sd[i]),nrow=1000,ncol=length(dose_g_5),byrow=T)
save(doses,sim_data,file=sprintf("Hill_normal_g_5_sim_%d.Rdata",i))
doses = dose_e_5
sim_data <- matrix(rnorm(1000*length(dose_e_5),means_e_5,sd[i]),nrow=1000,ncol=length(dose_e_5),byrow=T)
save(doses,sim_data,file=sprintf("Hill_normal_e_5_sim_%d.Rdata",i))
doses = dose_g_4
sim_data <- matrix(rnorm(1000*length(dose_g_4),means_g_4,sd[i]),nrow=1000,ncol=length(dose_g_4),byrow=T)
save(doses,sim_data,file=sprintf("Hill_normal_g_4_sim_%d.Rdata",i))
doses = dose_e_4
sim_data <- matrix(rnorm(1000*length(dose_e_4),means_e_4,sd[i]),nrow=1000,ncol=length(dose_e_4),byrow=T)
save(doses,sim_data,file=sprintf("Hill_normal_e_4_sim_%d.Rdata",i))
}
setwd("~/Documents/r_packages/RBMDS/RBMDS/Simulation/Hill/results2")
library(ToxicR)
model_list  = data.frame(model_list = c(rep("hill",2),rep("exp-3",3),rep("exp-5",3),rep("power",2)),
distribution_list =  c(c("normal","normal-ncv"),rep(c("normal","normal-ncv","lognormal"),2),
"normal", "normal-ncv"))
model_list2 = data.frame(model_list = c(rep("hill",1),rep("exp-3",1),rep("exp-5",1),rep("power",1)),
distribution_list =  c(rep(c("normal"),4)))
file_list = dir()
file_list %in% "results2"
file_list %in% "result2"
dir()
pwd
dir
dir()
setwd("~/Documents/r_packages/RBMDS/RBMDS/Simulation/Hill/results2")
setwd("~/Documents/r_packages/RBMDS/RBMDS/Simulation/Hill")
library(ToxicR)
model_list  = data.frame(model_list = c(rep("hill",2),rep("exp-3",3),rep("exp-5",3),rep("power",2)),
distribution_list =  c(c("normal","normal-ncv"),rep(c("normal","normal-ncv","lognormal"),2),
"normal", "normal-ncv"))
model_list2 = data.frame(model_list = c(rep("hill",1),rep("exp-3",1),rep("exp-5",1),rep("power",1)),
distribution_list =  c(rep(c("normal"),4)))
file_list = dir()
file_list %in% "result2"
file_list %in% "results2"
for (ii in 1:length(file_list)){
load(file_list[ii])
BMD_result_REL_ML1_mcmc = matrix(NA,1000,3)
BMD_result_REL_ML1_lapl = matrix(NA,1000,3)
BMD_result_REL_ML2_mcmc = matrix(NA,1000,3)
BMD_result_REL_ML2_lapl = matrix(NA,1000,3)
pprobs_ML1 = matrix(NA,1000,10)
pprobs_ML2 = matrix(NA,1000,4)
for (jj in 1:1000){#nrow(sim_data)){
print(sprintf("File:%d Iter:%d.",ii,jj))
###############################################################################
y = sim_data[jj,]
fit <- lm(y ~ doses)
if (fit[[1]][2] < 0){
BMR = 0.9
}else{
BMR = 0.1
}
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'rel',BMR = BMR ,samples = 25000)
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "mcmc",BMD_TYPE = 'rel',BMR = BMR,samples = 25000)
AA_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'rel',BMR = BMR)
BB_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "laplace",BMD_TYPE = 'rel',BMR = BMR)
BMD_result_REL_ML1_mcmc[jj,] = AA$bmd
BMD_result_REL_ML1_lapl[jj,] = AA_l$bmd
BMD_result_REL_ML2_mcmc[jj,] = BB$bmd
BMD_result_REL_ML2_lapl[jj,] = BB_l$bmd
pprobs_ML1[jj,] = AA$posterior_probs
pprobs_ML2[jj,] = BB$posterior_probs
################################################################################
}
save(BMD_result_REL_ML1_lapl,BMD_result_REL_ML2_lapl,
BMD_result_REL_ML1_mcmc,BMD_result_REL_ML2_mcmc,
pprobs_ML1,pprobs_ML2,file=sprintf("./results2/simrun_%s",file_list[ii]))
}
dir()
sprintf("./results2/simrun_%s",file_list[ii])
file_list
file_list[ii]
