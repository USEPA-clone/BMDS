lines(index(DOW.dab),log(DOW.dab),col=2)
m <- rowMeans(D)
library(quantmod)
NASDAQ <-getSymbols("^IXIC", from = as.Date("1960-01-01"), to =as.Date("2020-12-04"), auto.assign = FALSE)
v.da <- b$IXIC.Close
DOW <- getSymbols("^DJI", from = as.Date("1950-01-01"), to = as.Date("2020-12-04"), auto.assign = FALSE)
DOW.dab <- DOW$DJI.Close
X <- index(DOW.dab)
pred.dates <- seq(min(X),max(X),(max(X)-min(X))/2)
fitLM <- function(a){
V <-sample(DOW.dab,100)
K = coefficients(lm(log(V)~index(V)))
return(K)
}
s <- 1:2000
D = q <- mapply(fitLM,s)
plot(index(DOW.dab),log(DOW.dab),col=2,type='l')
for (i in 1:2000){
pred.Y <- D[1,i] +  D[2,i]*as.numeric(pred.dates)
pred <- xts(x = pred.Y, order.by = pred.dates)
lines(pred.dates,pred.Y)
}
lines(index(DOW.dab),log(DOW.dab),col=2)
m <- rowMeans(D)
library(mvtnorm)
library(splines)
hill_function <-      function(d,parms){
alpha <- parms[1]
gamma <- parms[2]
k     <- parms[3]
n     <- parms[4]
return ( alpha + gamma*d^n/(k^n+d^n))
}
hill_grad_function <- function(d,parms){
alpha <- parms[1]
gamma <- parms[2]
k     <- parms[3]
n     <- parms[4]
temp =  cbind(rep(1,length(d)),d^n/(k^n+d^n),-gamma*d^n*n*k^n/(k^n + d^n)^2,gamma*d^n*k^n*(log(d)-log(k))/(k^n + d^n))
temp[is.nan(temp)==TRUE] = 0
return(temp)
}
set.seed(8675309)
doses     <- rep(c(0,0.0625,0.125,0.25,0.5,1,2),each = 10)
beta_mean <- c(1,10,0.5,2.5)
beta_mean2 <- c(1,10,0.1,3)
beta_gprior <- hill_grad_function(doses,beta_mean2)
beta_gprior <- solve(t(beta_gprior)%*%beta_gprior)
c_beta <- beta_mean + rnorm(4,0,0.1)
p_beta <- c_beta
y <- sqrt(1)*rnorm(length(doses)) + hill_function(doses,p_beta)
B  <- single_continuous_fit(as.matrix(doses),as.matrix(y),model_type = "hill", distribution="normal",fit_type = "laplace",BMR = 2,sstat = F,isFast = FALSE)
install.packages("mvtnorm")
library(mvtnorm)
library(splines)
library(ToxicR)
hill_function <-      function(d,parms){
alpha <- parms[1]
gamma <- parms[2]
k     <- parms[3]
n     <- parms[4]
return ( alpha + gamma*d^n/(k^n+d^n))
}
hill_grad_function <- function(d,parms){
alpha <- parms[1]
gamma <- parms[2]
k     <- parms[3]
n     <- parms[4]
temp =  cbind(rep(1,length(d)),d^n/(k^n+d^n),-gamma*d^n*n*k^n/(k^n + d^n)^2,gamma*d^n*k^n*(log(d)-log(k))/(k^n + d^n))
temp[is.nan(temp)==TRUE] = 0
return(temp)
}
set.seed(8675309)
doses     <- rep(c(0,0.0625,0.125,0.25,0.5,1,2),each = 10)
beta_mean <- c(1,10,0.5,2.5)
beta_mean2 <- c(1,10,0.1,3)
beta_gprior <- hill_grad_function(doses,beta_mean2)
beta_gprior <- solve(t(beta_gprior)%*%beta_gprior)
c_beta <- beta_mean + rnorm(4,0,0.1)
p_beta <- c_beta
y <- sqrt(1)*rnorm(length(doses)) + hill_function(doses,p_beta)
B  <- single_continuous_fit(as.matrix(doses),as.matrix(y),model_type = "hill", distribution="normal",fit_type = "laplace",BMR = 2,sstat = F,isFast = FALSE)
library(mvtnorm)
likelihood_hill <- function(parms,doses,y){
cont_hill_f <- function(parms,d){
g  <- parms[1]
nu <- parms[2]
k  <- exp(parms[3]);
n  <- exp(parms[4]);
rval <- g + nu*d^n/(k^n+d^n)
return (rval)
}
hill_mean <- cont_hill_f(parms,doses)
return(sum(dnorm(y,hill_mean,sd = sqrt(exp(parms[5])),log=TRUE)))
}
log_hill_prior <- function(prior,parms){
p      <- prior
return(sum(dnorm(parms,p[,1],p[,2],log=TRUE)))
}
prior <- matrix(c(0,10,
0,10,
0,0.5,
0,0.5,
0,1), ncol=2,byrow = TRUE)
saved_parms <- matrix(0,ncol=5,nrow=3000)
V = diag(prior[,2])
analytic_slice <- function(doses,y,x,prior,PM,PV){
L <- likelihood_hill(x,doses,y) + log(runif(1)) +
log_hill_prior(prior,x)    - dmvnorm(x,PM,PV,log=T)
V <- rmvnorm(1, sigma= PV)
theta   <- runif(1,0,2*pi)
theta_r <- c(theta-2*pi,theta)
while(TRUE){
W <- (x - PM) * cos(theta) + V * sin(theta) + PM
test <- likelihood_hill(W,doses,y) +
log_hill_prior(prior,W)    - dmvnorm(W,PM,PV,log=T)
if (test > L){
# print(test)
return(W)
}else{
if (theta < 0){
theta_r[1] = theta
}else{
theta_r[2] = theta
}
}
theta = runif(1,theta_r[1],theta_r[2])
}
}
curP = B$parameters*0
A = as.vector(B$parameters)
A[3] = log(A[3])
A[4] = log(A[4])
analytic_slice(doses,y,curP,prior,A,B$covariance)
for (ii in 1:3000){
curP = analytic_slice(doses,y,curP,prior,A,B$covariance*10)
saved_parms[ii,] = curP
}
plot(saved_parms[,1])
plot(saved_parms[,4])
likelihood_hill <- function(parms,doses,y){
cont_hill_f <- function(parms,d){
g  <- parms[1]
nu <- parms[2]
k  <- exp(parms[3]);
n  <- exp(parms[4]);
rval <- g + nu*d^n/(k^n+d^n)
return (rval)
}
hill_mean <- cont_hill_f(parms,doses)
return(sum(dnorm(y,hill_mean,sd = sqrt(exp(parms[5])),log=TRUE)))
}
for (ii in 1:3000){
curP = analytic_slice(doses,y,curP,prior,A,B$covariance*10)
saved_parms[ii,] = curP
}
plot(saved_parms[,4])
plot(saved_parms[,3])
stan_model = "
data {
int<lower=0> N;
vector[N] d;
vector[N] y;
}
parameters {
real alpha;
real beta;
real log_n;
real log_k;
realsigma;
}
transformed parameters {
real k;
real n;
n  = exp(log_n); k = exp(log_k);
}
model {
alpha ~ normal(0,10);
beta  ~ normal(0,10);
log_n     ~ normal(0,0.5);
log_k     ~ normal(0,0.5);
sigma2 ~ normal(0,1)
y ~ normal(alpha + beta * d^n/(k^n+d^n), exp(0.5*sigma2));
}
"
library(rstan)
data_v   <- list(d = doses,y = y, N = length(y))
stan_fit <- stan(model_code = stan_model,data = data_v)
stan_model = "
data {
int<lower=0> N;
vector[N] d;
vector[N] y;
}
parameters {
real alpha;
real beta;
real log_n;
real log_k;
real sigma;
}
transformed parameters {
real k;
real n;
n  = exp(log_n); k = exp(log_k);
}
model {
alpha ~ normal(0,10);
beta  ~ normal(0,10);
log_n     ~ normal(0,0.5);
log_k     ~ normal(0,0.5);
sigma2 ~ normal(0,1)
y ~ normal(alpha + beta * d^n/(k^n+d^n), exp(0.5*sigma2));
}
"
library(rstan)
data_v   <- list(d = doses,y = y, N = length(y))
stan_fit <- stan(model_code = stan_model,data = data_v)
stan_model = "
data {
int<lower=0> N;
vector[N] d;
vector[N] y;
}
parameters {
real alpha;
real beta;
real log_n;
real log_k;
real sigma;
}
transformed parameters {
real k;
real n;
n  = exp(log_n); k = exp(log_k);
}
model {
alpha ~ normal(0,10);
beta  ~ normal(0,10);
log_n     ~ normal(0,0.5);
log_k     ~ normal(0,0.5);
sigma ~ normal(0,1)
y ~ normal(alpha + beta * d^n/(k^n+d^n), exp(0.5*sigma));
}
"
library(rstan)
data_v   <- list(d = doses,y = y, N = length(y))
stan_fit <- stan(model_code = stan_model,data = data_v)
stan_model = "
data {
int<lower=0> N;
vector[N] d;
vector[N] y;
}
parameters {
real alpha;
real beta;
real log_n;
real log_k;
real sigma;
}
transformed parameters {
real k;
real n;
n  = exp(log_n); k = exp(log_k);
}
model {
alpha ~ normal(0,10);
beta  ~ normal(0,10);
log_n     ~ normal(0,0.5);
log_k     ~ normal(0,0.5);
sigma  ~ normal(0,1);
y ~ normal(alpha + beta * d^n/(k^n+d^n), exp(0.5*sigma));
}
"
library(rstan)
data_v   <- list(d = doses,y = y, N = length(y))
stan_fit <- stan(model_code = stan_model,data = data_v)
stan_model = "
data {
int<lower=0> N;
vector[N] d;
vector[N] y;
}
parameters {
real alpha;
real beta;
real log_n;
real log_k;
real sigma;
}
transformed parameters {
real k;
real n;
n  = exp(log_n); k = exp(log_k);
}
model {
alpha ~ normal(0,10);
beta  ~ normal(0,10);
log_n     ~ normal(0,0.5);
log_k     ~ normal(0,0.5);
sigma  ~ normal(0,1);
y ~ normal(alpha + beta * pow(d,n)/(pow(k,n)+pow(d,n)), exp(0.5*sigma));
}
"
library(rstan)
data_v   <- list(d = doses,y = y, N = length(y))
stan_fit <- stan(model_code = stan_model,data = data_v)
stan_model = "
data {
int<lower=0> N;
vector[N] d;
vector[N] y;
}
parameters {
real alpha;
real beta;
real log_n;
real log_k;
real sigma;
}
transformed parameters {
real k;
real n;
n  = exp(log_n); k = exp(log_k);
}
model {
alpha ~ normal(0,10);
beta  ~ normal(0,10);
log_n     ~ normal(0,0.5);
log_k     ~ normal(0,0.5);
sigma  ~ normal(0,1);
for (n in 1:N){
y[n] ~ normal(alpha + beta * pow(d[n],n)/(pow(k,n)+pow(d[n],n)), exp(0.5*sigma));
}
}
"
library(rstan)
data_v   <- list(d = doses,y = y, N = length(y))
stan_fit <- stan(model_code = stan_model,data = data_v)
stan_model = "
data {
int<lower=0> N;
vector[N] d;
vector[N] y;
}
parameters {
real alpha;
real beta;
real log_n;
real log_k;
real sigma;
}
transformed parameters {
real k;
real n;
n  = exp(log_n); k = exp(log_k);
}
model {
alpha ~ normal(0,10);
beta  ~ normal(0,10);
log_n     ~ normal(0,0.5);
log_k     ~ normal(0,0.5);
sigma  ~ normal(0,1);
for (j in 1:N){
y[j] ~ normal(alpha + beta * pow(d[j],n)/(pow(k,n)+pow(d[j],n)), exp(0.5*sigma));
}
}
"
library(rstan)
data_v   <- list(d = doses,y = y, N = length(y))
stan_fit <- stan(model_code = stan_model,data = data_v)
print(stan_fit)
mean(saved_parms[,4])
mean(saved_parms[,2])
mean(saved_parms[,3])
var(saved_parms[,3])
sd(saved_parms[,3])
sd(saved_parms[,4])
library(coda)
effectiveSize(saved_parms[,4])
effectiveSize(saved_parms[,3])
saved_parms <- matrix(0,ncol=5,nrow=4000)
for (ii in 1:4000){
curP = analytic_slice(doses,y,curP,prior,A,B$covariance*2)
saved_parms[ii,] = curP
}
saved_parms <- matrix(0,ncol=5,nrow=4000)
for (ii in 1:4000){
curP = analytic_slice(doses,y,curP,prior,A,B$covariance*2)
saved_parms[ii,] = curP
}
effectiveSize(saved_parms[,3])
effectiveSize(saved_parms[,4])
effectiveSize(saved_parms[,1])
plot(saved_parms[,1])
print(stan_fit)
saved_parms <- matrix(0,ncol=5,nrow=8000)
for (ii in 1:8000){
curP = analytic_slice(doses,y,curP,prior,A,B$covariance*2)
saved_parms[ii,] = curP
}
effectiveSize(saved_parms[,1])
effectiveSize(saved_parms[,2])
effectiveSize(saved_parms[,3])
effectiveSize(saved_parms[,4])
plot(saved_parms[,4])
plot(saved_parms[,3])
plot(saved_parms[,4])
plot(saved_parms[,5])
plot(saved_parms[,1])
plot(saved_parms[,2])
setwd("~/Documents/r_packages/RBMDS/RBMDS/Simulation")
setwd("~/Documents/r_packages/RBMDS/RBMDS/Simulation/Hill/results")
setwd("~/Documents/r_packages/RBMDS/RBMDS/Simulation/Hill")
library(ToxicR)
model_list  = data.frame(model_list = c(rep("hill",2),rep("exp-3",3),rep("exp-5",3),rep("power",2)),
distribution_list =  c(c("normal","normal-ncv"),rep(c("normal","normal-ncv","lognormal"),2),
"normal", "normal-ncv"))
model_list2 = data.frame(model_list = c(rep("hill",1),rep("exp-3",1),rep("exp-5",1),rep("power",1)),
distribution_list =  c(rep(c("normal"),4)))
file_list = dir()
file_list = file_list[!(file_list %in% c("results","results2"))]
ii = 1
load(file_list[ii])
BMD_result_REL_ML1_mcmc = matrix(NA,1000,3)
BMD_result_REL_ML1_lapl = matrix(NA,1000,3)
BMD_result_REL_ML2_mcmc = matrix(NA,1000,3)
BMD_result_REL_ML2_lapl = matrix(NA,1000,3)
pprobs_ML1 = matrix(NA,1000,10)
pprobs_ML2 = matrix(NA,1000,4)
jj = 1
print(sprintf("File:%d Iter:%d.",ii,jj))
###############################################################################
y = sim_data[jj,]
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'rel',BMR = 0.1,samples = 75000)
AA$bmd
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "mcmc",BMD_TYPE = 'rel',BMR = 0.1,samples = 75000)
BB$bmd
AA_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'rel',BMR = 0.1)
BB_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "laplace",BMD_TYPE = 'rel',BMR = 0.1)
AA_l$bmd
BB_l$bmd
system.time({AA_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'rel',BMR = 0.1)
BB_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "laplace",BMD_TYPE = 'rel',BMR = 0.1)})
library(ToxicR)
library(tidyverse)
model_list  = data.frame(model_list = c(rep("hill",2),rep("exp-3",3),rep("exp-5",3),rep("power",2)),
distribution_list =  c(c("normal","normal-ncv"),rep(c("normal","normal-ncv","lognormal"),2),
"normal", "normal-ncv"))
model_list2 = data.frame(model_list = c(rep("hill",1),rep("exp-3",1),rep("exp-5",1),rep("power",1)),
distribution_list =  c(rep(c("normal"),4)))
file_list = dir()
file_list = file_list[!(file_list %in% "results")]
file_list = file_list[grep("_normal_",file_list)]
options(warn=-1)
load(file_list[ii])
BMD_result_SD_ML1_mcmc = matrix(NA,1000,3)
BMD_result_SD_ML1_lapl = matrix(NA,1000,3)
BMD_result_SD_ML2_mcmc = matrix(NA,1000,3)
BMD_result_SD_ML2_lapl = matrix(NA,1000,3)
BMD_result_HB_ML1_mcmc = matrix(NA,1000,3)
BMD_result_HB_ML1_lapl = matrix(NA,1000,3)
BMD_result_HB_ML2_mcmc = matrix(NA,1000,3)
BMD_result_HB_ML2_lapl = matrix(NA,1000,3)
pprobs_ML1 = matrix(NA,1000,10)
pprobs_ML2 = matrix(NA,1000,4)
print(sprintf("File:%d Iter:%d.",ii,jj))
###############################################################################
y = sim_data[jj,]
system.time({
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1,samples = 50000)
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1,samples = 50000)
AA_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
BB_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "laplace",BMD_TYPE = 'sd',BMR = 1)
})
AA$bmd
AA_l$bmd
BB_l$bmd
BB$bmd
system.time({
###############################################################################
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025,samples = 75000)
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "mcmc",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025,samples = 75000)
AA_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025)
BB_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "laplace",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025)
})
system.time({
###############################################################################
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025,samples = 50000)
BB <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "mcmc",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025,samples = 50000)
AA_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "laplace",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025)
BB_l <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "laplace",BMD_TYPE = 'hybrid',BMR = 0.05,point_p = 0.025)
})
