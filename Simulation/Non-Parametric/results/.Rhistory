mean <- cont_hill_f(as.numeric(hill[2,]),doses)
y <- rinvgauss(length(mean),mean,18528.14)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
AA$bmd
#plot(AA)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list2,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
AA$bmd
#plot(AA)
mean <- cont_hill_f(as.numeric(hill[6,]),doses)
y <- rinvgauss(length(mean),mean,227.8176)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
#c is orig scale.
Exp5.p <- rbind(c(481,0.05,(1/1.42870),2),
c(481,0.02,(1/1.42870),2),
c(481,0.01,(1/1.42870),2),
c(481,0.1,(1/1.42870),2) ,
c(10.58,0.05,(1.75),1.5),
c(10.58,0.02,(1.75),1.5),
c(10.58,0.01,(1.75),1.5),
c(10.58,0.1, (1.75),1.5))
Exp5 <- data.frame(a=Exp5.p[,1],b=Exp5.p[,2],
c=Exp5.p[,3],d=Exp5.p[,4])
row.names(Exp5) <- c("Exp-5 Simulation 1","Exp-5 Simulation 2",
"Exp-5 Simulation 3","Exp-5 Simulation 4",
"Exp-5 Simulation 5","Exp-5 Simulation 6",
"Exp-5 Simulation 7","Exp-5 Simulation 8")
kable(Exp5,digits=3)
#log-transformed for fitting as in ToxicR use
Exp5.p <- rbind(c(481,0.05,log(1/1.42870),2),
c(481,0.02,log(1/1.42870),2),
c(481,0.01,log(1/1.42870),2),
c(481,0.1,log(1/1.42870),2) ,
c(10.58,0.05,log(1.5),1.5),
c(10.58,0.02,log(1.5),1.5),
c(10.58,0.01,log(1.5),1.5),
c(10.58,0.1,log(1.5),1.5))
Exp5 <- data.frame(a=Exp5.p[,1],b=Exp5.p[,2],
c=Exp5.p[,3],d=Exp5.p[,4])
row.names(Exp5) <- c("Exp-5 Simulation 1","Exp-5 Simulation 2",
"Exp-5 Simulation 3","Exp-5 Simulation 4",
"Exp-5 Simulation 5","Exp-5 Simulation 6",
"Exp-5 Simulation 7","Exp-5 Simulation 8")
doses <- rep(c(0,20,40,60,80,100),each=10)
mean <- cont_exp_5_f(as.numeric(Exp5[1,]),doses)
y <- rinvgauss(length(mean),mean,18528.14)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
mean <- cont_exp_5_f(as.numeric(Exp5[7,]),doses)
y <- rinvgauss(length(mean),mean, 227.8176)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
#log-transformed for fitting as in ToxicR use
beta1 <- c(0.15486274,0.14054532,0.05806702,0.67421470,0.18371405,0.92821744,1.60669594,1.04508522)
beta2 <- c(0.677816175,0.322787366,3.356424380,0.102841870,0.009085238,0.087907971,0.344255936,0.100000000)
#add 481 to get the background
beta3 <- c(-45.715480,-53.668821,-14.266726, -8.066441,-1.620326 ,-1.800000,-1.800000 ,-1.800000)
beta4 <- c(-11.9566632,-19.9908719,-39.3450020,-16.3895141,-2.8191037,-4.5801731,-0.834784,-0.7000000)
iSpline <- rbind(beta1,beta2,beta3,beta4)
iS <- data.frame(b1=iSpline[,1],b2=iSpline[,2],b3 = iSpline[,3],
b4=iSpline[,4],b5=iSpline[,5],b6 = iSpline[,6],
b7=iSpline[,7],b8=iSpline[,8])
row.names(iS) <- c("iSpline Simulation 1","iSpline Simulation 2",
"iSpline Simulation 3","iSpline Simulation 4")
kable(iS,digits=3)
doses <- rep(c(0,20,40,60,80,100),each=10)
library(splines2)
X <- iSpline(doses,knots=seq(30,90,20))
mean <- X%*%t(iS[1,,drop=F]) + 10.58
y <- rinvgauss(length(mean),mean,227.8176)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
doses <- rep(c(0,6.25,12.5,25,50,100),each=10)
library(splines2)
X <- iSpline(doses,knots=seq(30,90,20))
mean <- X%*%t(iS[3,,drop=F]) + 481
y <- rinvgauss(length(mean),mean, 18528.14)
AA <- ma_continuous_fit(as.matrix(doses),as.matrix(y),model_list=model_list,
fit_type = "mcmc",BMD_TYPE = 'sd',BMR = 1)
plot(AA)
mean <- X%*%t(iS[1,,drop=F]) + 481
plot(mean)
plot(doses,mean)
mean <- X%*%t(iS[2,,drop=F]) + 481
plot(doses,mean)
plot(A)
mean <- X%*%t(iS[2,,drop=F]) + 12
plot(A)
plot(doses,mean)
load("~/Documents/r_software/RBMDS/Simulation/Non-Parametric/NP_normal_e_5_sim_2.Rdata")
y <- sim_data[100,]
A = ma_continuous_fit(data$dose,data$alt,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.05, model_list = model_list)
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.05, model_list = model_list)
plot(A)
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.05,point_p = 0.025, model_list = model_list)
plot(A)
SD_no_G_4 <- cbind(lap1.sd[,1,3],lap2.sd[,1,3],mcmc1.sd[,1,3],mcmc2.sd[,1,3])*100
SD_no_G_5 <- cbind(lap1.sd[,1,4],lap2.sd[,1,4],mcmc1.sd[,1,4],mcmc2.sd[,1,4])*100
SD_no_E_4 <- cbind(lap1.sd[,1,1],lap2.sd[,1,1],mcmc1.sd[,1,1],mcmc2.sd[,1,1])*100
SD_no_E_5 <- cbind(lap1.sd[,1,2],lap2.sd[,1,2],mcmc1.sd[,1,2],mcmc2.sd[,1,2])*100
cbind(SD_no_E_5,SD_no_G_5)
SD_no_G_4 <- cbind(lap1.sd[,2,3],lap2.sd[,2,3],mcmc1.sd[,2,3],mcmc2.sd[,2,3])*100
SD_no_G_5 <- cbind(lap1.sd[,2,4],lap2.sd[,2,4],mcmc1.sd[,2,4],mcmc2.sd[,2,4])*100
SD_no_E_4 <- cbind(lap1.sd[,2,1],lap2.sd[,2,1],mcmc1.sd[,2,1],mcmc2.sd[,2,1])*100
SD_no_E_5 <- cbind(lap1.sd[,2,2],lap2.sd[,2,2],mcmc1.sd[,2,2],mcmc2.sd[,2,2])*100
cbind(SD_no_E_5,SD_no_G_5)
cbind(SD_no_E_4,SD_no_G_4)
load("~/Documents/r_software/RBMDS/Simulation/Non-Parametric/NP_lognormal_g_5_sim_2.Rdata")
y <- sim_data[100,]
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.05,point_p = 0.025, model_list = model_list)
plot(A)
A$posterior_probs
y <- sim_data[300,]
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.05,point_p = 0.025, model_list = model_list)
plot(A)
A$posterior_probs
A$bmd
y <- sim_data[303,]
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.05,point_p = 0.025, model_list = model_list)
plot(A)
A$bmd
bmds.H <- c(70.97,	72.03,	66.76,
16.06,	16.41,	14.8,
6.93,	6.49,	7.54,
22.15,	20.99,	23.74)
bmds.SD <- c(88.55,	88.55,	88.55,
26.5,	26.5,	26.5,
17.12,	17.14,	17.12,
48.49,	48.54,	48.49)
BMD.H  <- matrix(bmds.H,nrow=4,ncol=3,byrow=T)
BMD.SD <- matrix(bmds.SD,nrow=4,ncol=3,byrow=T)
setwd("~/Documents/r_software/RBMDS/Simulation/Non-Parametric/results")
files <- dir()
ivgSims = grepl("invGaussian",files)
norSims = grepl("normal",files)
lnorSims = grepl("lognormal",files)
cond1 = grepl("sim_1",files)
cond2 = grepl("sim_2",files)
cond3 = grepl("sim_3",files)
cond4 = !(cond1 | cond2 | cond3)
is_geom = grepl("_g_",files)
is_4    = grepl("_4_",files)
lap1.sd <- array(NA,c(4,3,4))
lap2.sd <- array(NA,c(4,3,4))
mcmc1.sd <- array(NA,c(4,3,4))
mcmc2.sd <- array(NA,c(4,3,4))
lap1.h <- array(NA,c(4,3,4))
lap2.h <- array(NA,c(4,3,4))
mcmc1.h <- array(NA,c(4,3,4))
mcmc2.h <- array(NA,c(4,3,4))
for (ii in 1:length(files)){
load(files[ii])
simtype = 1
if (lnorSims[ii] == TRUE){
simtype = 2
}
if (ivgSims[ii] == TRUE){
simtype = 3
}
even = 1
if (is_geom[ii] == TRUE){
even = 3
}
if (!is_4[ii] == TRUE){ # for 5 dose groups
even = even + 1
}
#simulation condition
scond = which(c(cond1[ii],cond2[ii],cond3[ii],cond4[ii]))
true_BMD.h  = BMD.H[scond,simtype]
true_BMD.sd = BMD.SD[scond,simtype]
lap1.sd[scond,simtype,even]  = mean(BMD_result_SD_ML1_lapl[,2] < true_BMD.sd,na.rm=TRUE)
lap2.sd[scond,simtype,even]  = mean(BMD_result_SD_ML2_lapl[,2] < true_BMD.sd,na.rm=TRUE)
mcmc1.sd[scond,simtype,even] = mean(BMD_result_SD_ML1_mcmc[,2]  < true_BMD.sd,na.rm=TRUE)
mcmc2.sd[scond,simtype,even] = mean(BMD_result_SD_ML2_mcmc[,2]  < true_BMD.sd,na.rm=TRUE)
lap1.h[scond,simtype,even]   = mean(BMD_result_HB_ML1_lapl[,2] < true_BMD.h,na.rm=TRUE)
lap2.h[scond,simtype,even]   = mean(BMD_result_HB_ML2_lapl[,2] < true_BMD.h,na.rm=TRUE)
mcmc1.h[scond,simtype,even]  = mean(BMD_result_HB_ML1_mcmc[,2]  < true_BMD.h,na.rm=TRUE)
mcmc2.h[scond,simtype,even]  = mean(BMD_result_HB_ML2_mcmc[,2]  < true_BMD.h,na.rm=TRUE)
}
library(xtable)
SD_ig_G_4 <- cbind(lap1.sd[,3,3],lap2.sd[,3,3],mcmc1.sd[,3,3],mcmc2.sd[,3,3])*100
SD_ig_G_5 <- cbind(lap1.sd[,3,4],lap2.sd[,3,4],mcmc1.sd[,3,4],mcmc2.sd[,3,4])*100
SD_ig_E_4 <- cbind(lap1.sd[,3,1],lap2.sd[,3,1],mcmc1.sd[,3,1],mcmc2.sd[,3,1])*100
SD_ig_E_5 <- cbind(lap1.sd[,3,2],lap2.sd[,3,2],mcmc1.sd[,3,2],mcmc2.sd[,3,2])*100
SD_no_G_4 <- cbind(lap1.sd[,2,3],lap2.sd[,2,3],mcmc1.sd[,2,3],mcmc2.sd[,2,3])*100
SD_no_G_5 <- cbind(lap1.sd[,2,4],lap2.sd[,2,4],mcmc1.sd[,2,4],mcmc2.sd[,2,4])*100
SD_no_E_4 <- cbind(lap1.sd[,2,1],lap2.sd[,2,1],mcmc1.sd[,2,1],mcmc2.sd[,2,1])*100
SD_no_E_5 <- cbind(lap1.sd[,2,2],lap2.sd[,2,2],mcmc1.sd[,2,2],mcmc2.sd[,2,2])*100
cbind(SD_no_E_4,SD_no_G_4)
cbind(SD_no_E_5,SD_no_G_5)
load("~/Documents/r_software/RBMDS/Simulation/Non-Parametric/results/simrun_NP_lognormal_e_5_sim_2.Rdata")
View(BMD_result_SD_ML1_lapl)
View(BMD_result_HB_ML1_mcmc)
View(BMD_result_SD_ML2_lapl)
View(BMD_result_SD_ML2_mcmc)
load("~/Documents/r_software/RBMDS/Simulation/Non-Parametric/NP_lognormal_e_5_sim_2.Rdata")
y <- sim_data[1],]
y <- sim_data[1,]
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.05,point_p = 0.025, model_list = model_list)
plot(A)
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=1, model_list = model_list)
plot(A)
A$posterior_probs
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.5, model_list = model_list)
plot(A)
A = ma_continuous_fit(doses,y,fit_type="mcmc",BMD_TYPE = "hybrid" ,BMR=0.25, model_list = model_list)
plot(A)
A$posterior_probs
bmds.SD<- c(54.9,	54.91,	54.9,
21.59,	21.6,	21.59,
7.24,	7.25,	7.24,
40.92,	40.93,	40.92,
49.97,	49.97,	49.97,
16.87,	16.87,	16.87,
8.31,	8.31,	8.31,
37.23,	37.23,	37.23)
bmds.H <- c(41.49,	57.19,	42.61,
10.61,	23.94,	11.35,
3.13,	8.18,	3.39,
32.48,	42.32,	33.2,
40.08,	54.81,	38.9,
13.04,	18.79,	12.6,
5.65,	9.78,	5.37,
30.7,	40.37,	29.91)
BMD.H  <- matrix(bmds.H,nrow=8,ncol=3,byrow=T)
BMD.SD <- matrix(bmds.SD,nrow=8,ncol=3,byrow=T)
setwd("~/Documents/r_software/RBMDS/Simulation/Hill/results")
files <- dir()
ivgSims = grepl("invGaussian",files)
norSims = grepl("normal",files)
lnorSims = grepl("lognormal",files)
cond1 = grepl("sim_1",files)
cond2 = grepl("sim_2",files)
cond3 = grepl("sim_3",files)
cond4 = grepl("sim_4",files)
cond5 = grepl("sim_5",files)
cond6 = grepl("sim_6",files)
cond7 = grepl("sim_7",files)
cond8 = !(cond1 | cond2 | cond3 | cond4 | cond5 | cond6 | cond7)
is_geom = grepl("_g_",files)
is_4    = grepl("_4_",files)
lap1.sd <- array(NA,c(8,3,4))
lap2.sd <- array(NA,c(8,3,4))
mcmc1.sd <- array(NA,c(8,3,4))
mcmc2.sd <- array(NA,c(8,3,4))
lap1.h <- array(NA,c(8,3,4))
lap2.h <- array(NA,c(8,3,4))
mcmc1.h <- array(NA,c(8,3,4))
mcmc2.h <- array(NA,c(8,3,4))
for (ii in 1:length(files)){
load(files[ii])
simtype = 1
if (lnorSims[ii] == TRUE){
simtype = 2
}
if (ivgSims[ii] == TRUE){
simtype = 3
}
even = 1
if (is_geom[ii] == TRUE){
even = 3
}
if (!is_4[ii] == TRUE){ # for 5 dose groups
even = even + 1
}
#simulation condition
scond = which(c(cond1[ii],cond2[ii],cond3[ii],cond4[ii],cond5[ii],cond6[ii],cond7[ii],cond8[ii]))
true_BMD.h  = BMD.H[scond,simtype]
true_BMD.sd = BMD.SD[scond,simtype]
lap1.sd[scond,simtype,even]  = mean(BMD_result_SD_ML1_lapl[,2] < true_BMD.sd,na.rm=TRUE)
lap2.sd[scond,simtype,even]  = mean(BMD_result_SD_ML2_lapl[,2] < true_BMD.sd,na.rm=TRUE)
mcmc1.sd[scond,simtype,even] = mean(BMD_result_SD_ML1_mcmc[,2]  < true_BMD.sd,na.rm=TRUE)
mcmc2.sd[scond,simtype,even] = mean(BMD_result_SD_ML2_mcmc[,2]  < true_BMD.sd,na.rm=TRUE)
lap1.h[scond,simtype,even]   = mean(BMD_result_HB_ML1_lapl[,2] < true_BMD.h,na.rm=TRUE)
lap2.h[scond,simtype,even]   = mean(BMD_result_HB_ML2_lapl[,2] < true_BMD.h,na.rm=TRUE)
mcmc1.h[scond,simtype,even]  = mean(BMD_result_HB_ML1_mcmc[,2]  < true_BMD.h,na.rm=TRUE)
mcmc2.h[scond,simtype,even]  = mean(BMD_result_HB_ML2_mcmc[,2]  < true_BMD.h,na.rm=TRUE)
}
library(xtable)
SD_ig_G_4 <- cbind(lap1.sd[,3,3],lap2.sd[,3,3],mcmc1.sd[,3,3],mcmc2.sd[,3,3])*100
SD_ig_G_5 <- cbind(lap1.sd[,3,4],lap2.sd[,3,4],mcmc1.sd[,3,4],mcmc2.sd[,3,4])*100
SD_ig_E_4 <- cbind(lap1.sd[,3,1],lap2.sd[,3,1],mcmc1.sd[,3,1],mcmc2.sd[,3,1])*100
SD_ig_E_5 <- cbind(lap1.sd[,3,2],lap2.sd[,3,2],mcmc1.sd[,3,2],mcmc2.sd[,3,2])*100
SD_no_G_4 <- cbind(lap1.sd[,2,3],lap2.sd[,2,3],mcmc1.sd[,2,3],mcmc2.sd[,2,3])*100
SD_no_G_5 <- cbind(lap1.sd[,2,4],lap2.sd[,2,4],mcmc1.sd[,2,4],mcmc2.sd[,2,4])*100
SD_no_E_4 <- cbind(lap1.sd[,2,1],lap2.sd[,2,1],mcmc1.sd[,2,1],mcmc2.sd[,2,1])*100
SD_no_E_5 <- cbind(lap1.sd[,2,2],lap2.sd[,2,2],mcmc1.sd[,2,2],mcmc2.sd[,2,2])*100
xtable(cbind(SD_ig_E_5,SD_ig_G_5), digits = 1)
HB_ig_G_4 <- cbind(lap1.h[,3,3],lap2.h[,3,3],mcmc1.h[,3,3],mcmc2.h[,3,3])*100
HB_ig_G_5 <- cbind(lap1.h[,3,4],lap2.h[,3,4],mcmc1.h[,3,4],mcmc2.h[,3,4])*100
HB_ig_E_4 <- cbind(lap1.h[,3,1],lap2.h[,3,1],mcmc1.h[,3,1],mcmc2.h[,3,1])*100
HB_ig_E_5 <- cbind(lap1.h[,3,2],lap2.h[,3,2],mcmc1.h[,3,2],mcmc2.h[,3,2])*100
xtable(cbind(HB_ig_E_5,HB_ig_G_5), digits = 1)
SD_no_G_4 <- cbind(lap1.sd[,2,3],lap2.sd[,2,3],mcmc1.sd[,2,3],mcmc2.sd[,2,3])*100
SD_no_G_5 <- cbind(lap1.sd[,2,4],lap2.sd[,2,4],mcmc1.sd[,2,4],mcmc2.sd[,2,4])*100
SD_no_E_4 <- cbind(lap1.sd[,2,1],lap2.sd[,2,1],mcmc1.sd[,2,1],mcmc2.sd[,2,1])*100
SD_no_E_5 <- cbind(lap1.sd[,2,2],lap2.sd[,2,2],mcmc1.sd[,2,2],mcmc2.sd[,2,2])*100
cbind(SD_no_E_5,SD_no_G_5)
cbind(SD_no_E_4,SD_no_G_4)
SD_no_G_4 <- cbind(lap1.sd[,1,3],lap2.sd[,1,3],mcmc1.sd[,1,3],mcmc2.sd[,1,3])*100
SD_no_G_5 <- cbind(lap1.sd[,1,4],lap2.sd[,1,4],mcmc1.sd[,1,4],mcmc2.sd[,1,4])*100
SD_no_E_4 <- cbind(lap1.sd[,1,1],lap2.sd[,1,1],mcmc1.sd[,1,1],mcmc2.sd[,1,1])*100
SD_no_E_5 <- cbind(lap1.sd[,1,2],lap2.sd[,1,2],mcmc1.sd[,1,2],mcmc2.sd[,1,2])*100
cbind(SD_no_E_4,SD_no_G_4)
SD_no_G_4 <- cbind(lap1.sd[,1,3],lap2.sd[,1,3],mcmc1.sd[,1,3],mcmc2.sd[,1,3])*100
SD_no_G_5 <- cbind(lap1.sd[,1,4],lap2.sd[,1,4],mcmc1.sd[,1,4],mcmc2.sd[,1,4])*100
SD_no_E_4 <- cbind(lap1.sd[,1,1],lap2.sd[,1,1],mcmc1.sd[,1,1],mcmc2.sd[,1,1])*100
SD_no_E_5 <- cbind(lap1.sd[,1,2],lap2.sd[,1,2],mcmc1.sd[,1,2],mcmc2.sd[,1,2])*100
cbind(SD_no_E_5,SD_no_G_5)
A$posterior_probs
cbind(SD_ig_E_5,SD_ig_G_5)
cbind(SD_ig_E_4,SD_ig_G_4)
HB_ig_G_4 <- cbind(lap1.h[,2,3],lap2.h[,2,3],mcmc1.h[,2,3],mcmc2.h[,2,3])*100
HB_ig_G_5 <- cbind(lap1.h[,2,4],lap2.h[,2,4],mcmc1.h[,2,4],mcmc2.h[,2,4])*100
HB_ig_E_4 <- cbind(lap1.h[,2,1],lap2.h[,2,1],mcmc1.h[,2,1],mcmc2.h[,2,1])*100
HB_ig_E_5 <- cbind(lap1.h[,2,2],lap2.h[,2,2],mcmc1.h[,2,2],mcmc2.h[,2,2])*100
HB_no_G_4 <- cbind(lap1.h[,2,3],lap2.h[,2,3],mcmc1.h[,2,3],mcmc2.h[,2,3])*100
HB_no_G_5 <- cbind(lap1.h[,2,4],lap2.h[,2,4],mcmc1.h[,2,4],mcmc2.h[,2,4])*100
HB_no_E_4 <- cbind(lap1.h[,2,1],lap2.h[,2,1],mcmc1.h[,2,1],mcmc2.h[,2,1])*100
HB_no_E_5 <- cbind(lap1.h[,2,2],lap2.h[,2,2],mcmc1.h[,2,2],mcmc2.h[,2,2])*100
cbind(HB_no_E_5,HB_no_G_5)
bmds.H <- c(70.97,	72.03,	66.76,
16.06,	16.41,	14.8,
6.93,	6.49,	7.54,
22.15,	20.99,	23.74)
bmds.SD <- c(88.55,	88.55,	88.55,
26.5,	26.5,	26.5,
17.12,	17.14,	17.12,
48.49,	48.54,	48.49)
BMD.H  <- matrix(bmds.H,nrow=4,ncol=3,byrow=T)
BMD.SD <- matrix(bmds.SD,nrow=4,ncol=3,byrow=T)
setwd("~/Documents/r_software/RBMDS/Simulation/Non-Parametric/results")
files <- dir()
ivgSims = grepl("invGaussian",files)
norSims = grepl("normal",files)
lnorSims = grepl("lognormal",files)
cond1 = grepl("sim_1",files)
cond2 = grepl("sim_2",files)
cond3 = grepl("sim_3",files)
cond4 = !(cond1 | cond2 | cond3)
is_geom = grepl("_g_",files)
is_4    = grepl("_4_",files)
lap1.sd <- array(NA,c(4,3,4))
lap2.sd <- array(NA,c(4,3,4))
mcmc1.sd <- array(NA,c(4,3,4))
mcmc2.sd <- array(NA,c(4,3,4))
lap1.h <- array(NA,c(4,3,4))
lap2.h <- array(NA,c(4,3,4))
mcmc1.h <- array(NA,c(4,3,4))
mcmc2.h <- array(NA,c(4,3,4))
for (ii in 1:length(files)){
load(files[ii])
simtype = 1
if (lnorSims[ii] == TRUE){
simtype = 2
}
if (ivgSims[ii] == TRUE){
simtype = 3
}
even = 1
if (is_geom[ii] == TRUE){
even = 3
}
if (!is_4[ii] == TRUE){ # for 5 dose groups
even = even + 1
}
#simulation condition
scond = which(c(cond1[ii],cond2[ii],cond3[ii],cond4[ii]))
true_BMD.h  = BMD.H[scond,simtype]
true_BMD.sd = BMD.SD[scond,simtype]
lap1.sd[scond,simtype,even]  = mean(BMD_result_SD_ML1_lapl[,2] < true_BMD.sd,na.rm=TRUE)
lap2.sd[scond,simtype,even]  = mean(BMD_result_SD_ML2_lapl[,2] < true_BMD.sd,na.rm=TRUE)
mcmc1.sd[scond,simtype,even] = mean(BMD_result_SD_ML1_mcmc[,2]  < true_BMD.sd,na.rm=TRUE)
mcmc2.sd[scond,simtype,even] = mean(BMD_result_SD_ML2_mcmc[,2]  < true_BMD.sd,na.rm=TRUE)
lap1.h[scond,simtype,even]   = mean(BMD_result_HB_ML1_lapl[,2] < true_BMD.h,na.rm=TRUE)
lap2.h[scond,simtype,even]   = mean(BMD_result_HB_ML2_lapl[,2] < true_BMD.h,na.rm=TRUE)
mcmc1.h[scond,simtype,even]  = mean(BMD_result_HB_ML1_mcmc[,2]  < true_BMD.h,na.rm=TRUE)
mcmc2.h[scond,simtype,even]  = mean(BMD_result_HB_ML2_mcmc[,2]  < true_BMD.h,na.rm=TRUE)
}
library(xtable)
SD_ig_G_4 <- cbind(lap1.sd[,3,3],lap2.sd[,3,3],mcmc1.sd[,3,3],mcmc2.sd[,3,3])*100
SD_ig_G_5 <- cbind(lap1.sd[,3,4],lap2.sd[,3,4],mcmc1.sd[,3,4],mcmc2.sd[,3,4])*100
SD_ig_E_4 <- cbind(lap1.sd[,3,1],lap2.sd[,3,1],mcmc1.sd[,3,1],mcmc2.sd[,3,1])*100
SD_ig_E_5 <- cbind(lap1.sd[,3,2],lap2.sd[,3,2],mcmc1.sd[,3,2],mcmc2.sd[,3,2])*100
SD_no_G_4 <- cbind(lap1.sd[,2,3],lap2.sd[,2,3],mcmc1.sd[,2,3],mcmc2.sd[,2,3])*100
SD_no_G_5 <- cbind(lap1.sd[,2,4],lap2.sd[,2,4],mcmc1.sd[,2,4],mcmc2.sd[,2,4])*100
SD_no_E_4 <- cbind(lap1.sd[,2,1],lap2.sd[,2,1],mcmc1.sd[,2,1],mcmc2.sd[,2,1])*100
SD_no_E_5 <- cbind(lap1.sd[,2,2],lap2.sd[,2,2],mcmc1.sd[,2,2],mcmc2.sd[,2,2])*100
cbind(SD_no_E_5,SD_no_G_5)
xtable(cbind(SD_ig_E_5,SD_ig_G_5), digits = 1)
HB_ig_G_4 <- cbind(lap1.h[,3,3],lap2.h[,3,3],mcmc1.h[,3,3],mcmc2.h[,3,3])*100
HB_ig_G_5 <- cbind(lap1.h[,3,4],lap2.h[,3,4],mcmc1.h[,3,4],mcmc2.h[,3,4])*100
HB_ig_E_4 <- cbind(lap1.h[,3,1],lap2.h[,3,1],mcmc1.h[,3,1],mcmc2.h[,3,1])*100
HB_ig_E_5 <- cbind(lap1.h[,3,2],lap2.h[,3,2],mcmc1.h[,3,2],mcmc2.h[,3,2])*100
HB_no_G_4 <- cbind(lap1.h[,3,3],lap2.h[,3,3],mcmc1.h[,3,3],mcmc2.h[,3,3])*100
HB_no_G_5 <- cbind(lap1.h[,3,4],lap2.h[,3,4],mcmc1.h[,3,4],mcmc2.h[,3,4])*100
HB_no_E_4 <- cbind(lap1.h[,3,1],lap2.h[,3,1],mcmc1.h[,3,1],mcmc2.h[,3,1])*100
HB_no_E_5 <- cbind(lap1.h[,3,2],lap2.h[,3,2],mcmc1.h[,3,2],mcmc2.h[,3,2])*100
xtable(cbind(HB_ig_E_5,HB_ig_G_5), digits = 1)
xtable(cbind(HB_no_E_5,HB_no_G_5), digits = 1)
xtable(cbind(HB_ig_E_5,HB_ig_G_5), digits = 1)
HB_no_G_4 <- cbind(lap1.h[,1,3],lap2.h[,1,3],mcmc1.h[,1,3],mcmc2.h[,1,3])*100
HB_no_G_5 <- cbind(lap1.h[,1,4],lap2.h[,1,4],mcmc1.h[,1,4],mcmc2.h[,1,4])*100
HB_no_E_4 <- cbind(lap1.h[,1,1],lap2.h[,1,1],mcmc1.h[,1,1],mcmc2.h[,1,1])*100
HB_no_E_5 <- cbind(lap1.h[,1,2],lap2.h[,1,2],mcmc1.h[,1,2],mcmc2.h[,1,2])*100
xtable(cbind(HB_no_E_5,HB_no_G_5), digits = 1)
HB_no_G_4 <- cbind(lap1.h[,2,3],lap2.h[,2,3],mcmc1.h[,2,3],mcmc2.h[,2,3])*100
HB_no_G_5 <- cbind(lap1.h[,2,4],lap2.h[,2,4],mcmc1.h[,2,4],mcmc2.h[,2,4])*100
HB_no_E_4 <- cbind(lap1.h[,2,1],lap2.h[,2,1],mcmc1.h[,2,1],mcmc2.h[,2,1])*100
HB_no_E_5 <- cbind(lap1.h[,2,2],lap2.h[,2,2],mcmc1.h[,2,2],mcmc2.h[,2,2])*100
xtable(cbind(HB_no_E_5,HB_no_G_5), digits = 1)
# Ensure that ToxicR package is loaded.
# Uncomment the next 2 lines if pkgs are not being manually loaded
#library(Rcpp)
library(ToxicR)
#library(rstan)
# Input data - Continuous2.dax - Individual dose-response
M =matrix(0,nrow=26,ncol=4)
colnames(M) <- c("Dose","Resp","","")
M[,1] <- c(0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,49,49,49,49,49)
M[,2] <- c(39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,55.1,59.1,56.3,52.9,53.7)
#M[,1]  = c(0, 0,   0,   0,        18,  18,  18,  18,  18,      20,   20,  20,  20,     30,  30,  30,   30,    35,    35,  35,  35,    40,  40,  40,  40,  40);
#M[,2] = c(  39,38.4,36.3,37.1,    30.2,35.3,32.1,38.3,35.9,     22.5,25.2,20.1,29.8,   10.1,13.4,11.2,12.1,    6.1,   6.4, 6.2,6.2,     3.1, 3.4, 3.3,2.9,3.7);
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = single_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",model="HILL",BMR=1,sstat = F)
# Ensure that ToxicR package is loaded.
# Uncomment the next 2 lines if pkgs are not being manually loaded
#library(Rcpp)
library(ToxicR)
#library(rstan)
# Input data - Continuous2.dax - Individual dose-response
M =matrix(0,nrow=26,ncol=4)
colnames(M) <- c("Dose","Resp","","")
M[,1] <- c(0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,49,49,49,49,49)
M[,2] <- c(39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,55.1,59.1,56.3,52.9,53.7)
#M[,1]  = c(0, 0,   0,   0,        18,  18,  18,  18,  18,      20,   20,  20,  20,     30,  30,  30,   30,    35,    35,  35,  35,    40,  40,  40,  40,  40);
#M[,2] = c(  39,38.4,36.3,37.1,    30.2,35.3,32.1,38.3,35.9,     22.5,25.2,20.1,29.8,   10.1,13.4,11.2,12.1,    6.1,   6.4, 6.2,6.2,     3.1, 3.4, 3.3,2.9,3.7);
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = single_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",model="hill",BMR=1,sstat = F)
plot(A$mcmc_result$BMD_samples[,1])
plot(A$mcmc_result$BMD_samples[,2])
plot(A$mcmc_result$PARM_samples[,1])
plot(A$mcmc_result$PARM_samples[,1],ylab = "Paramter-a",xlab = "Iteration",pch=16)
library(coda)
install.packages("coda")
library(coda)
plot(A$mcmc_result$PARM_samples[,1],ylab = "Paramter - a",xlab = "Iteration",pch=16)
effectiveSize(A$mcmc_result$PARM_samples[,1])
plot(A$mcmc_result$PARM_samples[,1],ylab = "Paramter - b",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,2],ylab = "Paramter - b",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,2],ylab = "Paramter - c",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,3],ylab = "Paramter - c",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,4],ylab = "Paramter - c",xlab = "Iteration",pch=16)
plot(A)
M =matrix(0,nrow=26,ncol=4)
colnames(M) <- c("Dose","Resp","","")
M[,1] <- c(0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,49,49,49,49,49)
M[,2] <- c(39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,53.1,57.1,54.3,50.9,51.7)
#M[,1]  = c(0, 0,   0,   0,        18,  18,  18,  18,  18,      20,   20,  20,  20,     30,  30,  30,   30,    35,    35,  35,  35,    40,  40,  40,  40,  40);
#M[,2] = c(  39,38.4,36.3,37.1,    30.2,35.3,32.1,38.3,35.9,     22.5,25.2,20.1,29.8,   10.1,13.4,11.2,12.1,    6.1,   6.4, 6.2,6.2,     3.1, 3.4, 3.3,2.9,3.7);
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = single_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",model="hill",BMR=1,sstat = F)
plot(A)
M[,1] <- c(0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,49,49,49,49,49)
M[,2] <- c(39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,50.4,53.2,
55.2,53.1,56.1,54.3,50.9,51.7)
#M[,1]  = c(0, 0,   0,   0,        18,  18,  18,  18,  18,      20,   20,  20,  20,     30,  30,  30,   30,    35,    35,  35,  35,    40,  40,  40,  40,  40);
#M[,2] = c(  39,38.4,36.3,37.1,    30.2,35.3,32.1,38.3,35.9,     22.5,25.2,20.1,29.8,   10.1,13.4,11.2,12.1,    6.1,   6.4, 6.2,6.2,     3.1, 3.4, 3.3,2.9,3.7);
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = single_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",model="hill",BMR=1,sstat = F)
plot(A$mcmc_result$PARM_samples[,3],ylab = "Paramter - c",xlab = "Iteration",pch=16)
M[,1] <- c(0,0,0,0,0,18,18,18,18,20,20,20,20,30,30,30,30,35,35,35,35,49,49,49,49,49)
M[,2] <- c(39.0,39,38.4,36.3,37.1,40.2,45.3,42.1,38.3,42.5,45.2,40.1,39.8,50.1,53.4,48.2,52.1,56.1,55.4,53.2,
55.2,53.1,56.1,54.3,52.9,51.7)
#M[,1]  = c(0, 0,   0,   0,        18,  18,  18,  18,  18,      20,   20,  20,  20,     30,  30,  30,   30,    35,    35,  35,  35,    40,  40,  40,  40,  40);
#M[,2] = c(  39,38.4,36.3,37.1,    30.2,35.3,32.1,38.3,35.9,     22.5,25.2,20.1,29.8,   10.1,13.4,11.2,12.1,    6.1,   6.4, 6.2,6.2,     3.1, 3.4, 3.3,2.9,3.7);
data <- list(N=length(M[,1]),
d = M[,1],
y = M[,2])
A = single_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",model="hill",BMR=1,sstat = F)
plot(A$mcmc_result$PARM_samples[,3],ylab = "Paramter - c",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,4],ylab = "Paramter - c",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,4],ylab = "Paramter - d",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,1],ylab = "Paramter - c",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,1],ylab = "Paramter - a",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,2],ylab = "Paramter - b",xlab = "Iteration",pch=16)
plot(A$mcmc_result$PARM_samples[,3],ylab = "Paramter - c",xlab = "Iteration",pch=16)
effectiveSize(A$mcmc_result$PARM_samples[100:25000,1])
effectiveSize(A$mcmc_result$PARM_samples[100:20000,1])
effectiveSize(A$mcmc_result$PARM_samples[100:20000,2])
effectiveSize(A$mcmc_result$PARM_samples[100:20000,3])
effectiveSize(A$mcmc_result$PARM_samples[100:20000,4])
effectiveSize(A$mcmc_result$BMD_samples[100:20000,4])
effectiveSize(A$mcmc_result$BMD_samples[100:20000])
system.time({single_continuous_fit(M[,1,drop=F],M[,2,drop=F],fit_type="mcmc",model="hill",BMR=1,sstat = F)})
